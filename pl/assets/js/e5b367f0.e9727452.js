"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[415],{8860:(e,a,o)=>{o.d(a,{xA:()=>m,yg:()=>g});var t=o(7953);function n(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function r(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?r(Object(o),!0).forEach((function(a){n(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function l(e,a){if(null==e)return{};var o,t,n=function(e,a){if(null==e)return{};var o,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||(n[o]=e[o]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=t.createContext({}),u=function(e){var a=t.useContext(p),o=a;return e&&(o="function"==typeof e?e(a):i(i({},a),e)),o},m=function(e){var a=u(e.components);return t.createElement(p.Provider,{value:a},e.children)},y="mdxType",s={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var o=e.components,n=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),y=u(o),d=n,g=y["".concat(p,".").concat(d)]||y[d]||s[d]||r;return o?t.createElement(g,i(i({ref:a},m),{},{components:o})):t.createElement(g,i({ref:a},m))}));function g(e,a){var o=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=d;var l={};for(var p in a)hasOwnProperty.call(a,p)&&(l[p]=a[p]);l.originalType=e,l[y]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<r;u++)i[u]=o[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}d.displayName="MDXCreateElement"},6854:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var t=o(3911),n=(o(7953),o(8860));const r={slug:"python-youtube-downloader",title:"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu",authors:"bjab",tags:["python","scripts","tools"]},i="\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu",l={permalink:"/pl/blog/python-youtube-downloader",source:"@site/i18n/pl/docusaurus-plugin-content-blog/2024-05-16-youtube-downloader.md",title:"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu",description:"Ostatnio zrezygnowa\u0142em z Spotify Premium i s\u0142uchanie muzyki oraz podcast\xf3w w samolocie sta\u0142o si\u0119 trudniejsze. Do tej pory \u015bci\u0105ga\u0142em mp3 i mp4 za pomoc\u0105 narz\u0119dzi online typu:",date:"2024-05-16T00:00:00.000Z",formattedDate:"16 maja 2024",tags:[{label:"python",permalink:"/pl/blog/tags/python"},{label:"scripts",permalink:"/pl/blog/tags/scripts"},{label:"tools",permalink:"/pl/blog/tags/tools"}],readingTime:3.165,hasTruncateMarker:!0,authors:[{name:"Bartek Jab\u0142o\u0144ski",title:"Backend Cloud Developer",url:"https://bartas93.github.io",imageURL:"/images/bartek_jablonski_2.png",key:"bjab"}],frontMatter:{slug:"python-youtube-downloader",title:"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu",authors:"bjab",tags:["python","scripts","tools"]},prevItem:{title:"Obliczanie pami\u0119ci zajmowanej przez String - JOL Footprint",permalink:"/pl/blog/string-in-jvm-memory"}},p={authorsImageUrls:[void 0]},u=[{value:"1. Konfiguracja wst\u0119pna",id:"1-konfiguracja-wst\u0119pna",level:3},{value:"Pobieranie YouTube video w formacie mp4",id:"pobieranie-youtube-video-w-formacie-mp4",level:3},{value:"Pobieranie YouTube video w formacie mp3",id:"pobieranie-youtube-video-w-formacie-mp3",level:3},{value:"Pobieranie playlisty YouTube w formacie mp4",id:"pobieranie-playlisty-youtube-w-formacie-mp4",level:3},{value:"Pobieranie YouTube Playlist w formacie mp3",id:"pobieranie-youtube-playlist-w-formacie-mp3",level:3},{value:"Om\xf3wienie kodu (komentarze):",id:"om\xf3wienie-kodu-komentarze",level:2}],m={toc:u},y="wrapper";function s(e){let{components:a,...o}=e;return(0,n.yg)(y,(0,t.A)({},m,o,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Ostatnio zrezygnowa\u0142em z Spotify Premium i s\u0142uchanie muzyki oraz podcast\xf3w w samolocie sta\u0142o si\u0119 trudniejsze. Do tej pory \u015bci\u0105ga\u0142em mp3 i mp4 za pomoc\u0105 narz\u0119dzi online typu:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://notube.net/pl/youtube-app-v103"},"https://notube.net/pl/youtube-app-v103")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://y2down.cc/pl/youtube-mp4.html"},"https://y2down.cc/pl/youtube-mp4.html")," i inne")),(0,n.yg)("p",null,"Niestety narz\u0119dzia tego typu pozwalaj\u0105 na \u015bci\u0105ganie pojedynczych film\xf3w i zarzucaj\u0105 nas mas\u0105 inwazyjnych reklam. Aby omin\u0105\u0107 te problemy, napiszemy skrypt w j\u0119zyku python, kt\xf3ry po podaniu linku do playlisty lub filmu \u015bci\u0105gnie nam mp3 lub mp4."),(0,n.yg)("p",null,"Do napisania skryptu u\u017cyjemy bibliotek\u0119 ",(0,n.yg)("a",{parentName:"p",href:"https://pytube.io/en/latest/"},"pytube"),"."),(0,n.yg)("p",null,"Ca\u0142y skrypt mo\u017cecie znale\u017a\u0107 w repozytorium gitlab: ",(0,n.yg)("a",{parentName:"p",href:"https://gitlab.com/bart_as93/youtube-downloader"},"https://gitlab.com/bart_as93/youtube-downloader")),(0,n.yg)("h3",{id:"1-konfiguracja-wst\u0119pna"},"1. Konfiguracja wst\u0119pna"),(0,n.yg)("p",null,"Pobierz repozytorium na lokaln\u0105 maszyn\u0119:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"git clone https://gitlab.com/bart_as93/youtube-downloader.git\ncd youtube-downloader\n")),(0,n.yg)("p",null,"Sprawd\u017a wersje pythona"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python --version\n")),(0,n.yg)("p",null,"W moim przypadku ",(0,n.yg)("inlineCode",{parentName:"p"},"Python 3.11.4")),(0,n.yg)("p",null,"Nast\u0119pnie instalujemy zale\u017cno\u015bci"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.txt\n")),(0,n.yg)("p",null,"Nast\u0119pnie uruchamiamy skrypt np.:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\downloader.py -u https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music -f mp4\n")),(0,n.yg)("p",null,"Skrypt przyjmuje 4 argumenty:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-f")," - jeden z format\xf3w: mp3 albo mp4"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-d")," - docelowy folder w kt\xf3rym maj\u0105 znajdowa\u0107 si\u0119 \u015bci\u0105gni\u0119te pliki"),(0,n.yg)("li",{parentName:"ul"},"i jedno z po\u017cniszych:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-u")," - Url do wideo na platformie YouTube"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-pu")," - Url do playlisty na platformie Youtube")))),(0,n.yg)("h3",{id:"pobieranie-youtube-video-w-formacie-mp4"},"Pobieranie YouTube video w formacie mp4"),(0,n.yg)("p",null,"Aby \u015bci\u0105gn\u0105\u0107 film YouTube trzeba u\u017cy\u0107 flagi ",(0,n.yg)("inlineCode",{parentName:"p"},"-u <link_do_filmu>")," oraz flag\u0119 ",(0,n.yg)("inlineCode",{parentName:"p"},"-f mp4")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\downloader.py -u https://www.youtube.com/watch?v=a59gmGkq_pw -d movies -f mp4\n")),(0,n.yg)("h3",{id:"pobieranie-youtube-video-w-formacie-mp3"},"Pobieranie YouTube video w formacie mp3"),(0,n.yg)("p",null,"Aby \u015bci\u0105gn\u0105\u0107 audio z YouTube trzeba u\u017cy\u0107 flagi ",(0,n.yg)("inlineCode",{parentName:"p"},"-u <link_do_filmu>")," oraz flag\u0119 ",(0,n.yg)("inlineCode",{parentName:"p"},"-f mp3")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\downloader.py -u https://www.youtube.com/watch?v=a59gmGkq_pw -d music -f mp3\n")),(0,n.yg)("h3",{id:"pobieranie-playlisty-youtube-w-formacie-mp4"},"Pobieranie playlisty YouTube w formacie mp4"),(0,n.yg)("p",null,"Aby \u015bci\u0105gn\u0105\u0107 filmy z Playlisty YouTube trzeba u\u017cy\u0107 flagi ",(0,n.yg)("inlineCode",{parentName:"p"},"-pu <link_do_playlisty>")," oraz flag\u0119 ",(0,n.yg)("inlineCode",{parentName:"p"},"-f mp4")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\downloader.py -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music-f mp4\n")),(0,n.yg)("h3",{id:"pobieranie-youtube-playlist-w-formacie-mp3"},"Pobieranie YouTube Playlist w formacie mp3"),(0,n.yg)("p",null,"Aby \u015bci\u0105gn\u0105\u0107 audio z Playlisty YouTube trzeba u\u017cy\u0107 flagi ",(0,n.yg)("inlineCode",{parentName:"p"},"-pu <link_do_playlisty>")," oraz flag\u0119 ",(0,n.yg)("inlineCode",{parentName:"p"},"-f mp3")),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\downloader.py -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d movies -f mp3\n")),(0,n.yg)("h2",{id:"om\xf3wienie-kodu-komentarze"},"Om\xf3wienie kodu (komentarze):"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-python"},'import argparse\nimport os\nfrom pytube import Playlist\nfrom pytube import YouTube\n\n# Program obs\u0142uguje 2 formaty mp3 i mp4. W sekcji else przy innym formacie program jest wy\u0142\u0105czany\ndef downloadByVideo(vid):\n    print(\'downloading : {} - {} with url : {}\'.format(video.author, video.title, video.watch_url))\n    global type\n    vidFileName = vid.author + " - " + vid.title + "." + format\n    if format == \'mp3\':\n        type = \'audio\'\n# Na obiekcie video odwo\u0142ujemy si\u0119 do streams, filtrujemy tylko audio i wywo\u0142ujemy metod\u0119 download z opcjami opisuj\u0105cymi docelowy katalog w kt\xf3rym zostanie zapisany plik oraz nazw\u0119 pliku\n        vid.streams. \\\n            filter(only_audio=True).desc().first(). \\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\n    elif format == \'mp4\':\n        type = \'video\'\n# Na obiekcie video odwo\u0142ujemy si\u0119 do streams, filtrujemy tylko video, sortujemy od najwi\u0119kszego resolution i wywo\u0142ujemy metod\u0119 download z opcjami opisuj\u0105cymi docelowy katalog w kt\xf3rym zostanie zapisany plik oraz nazw\u0119 pliku\n        vid.streams. \\\n            filter(type=type, progressive=True, file_extension=format). \\\n            order_by(\'resolution\'). \\\n            desc(). \\\n            first(). \\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\n    else:\n        print(f"Not supported format type: {format}")\n        exit()\n\n# Obs\u0142uga parametr\xf3w command line i sprawdzenie wymaganych p\xf3l\nparser = argparse.ArgumentParser()\n\nparser.add_argument("-u", "--Url", help="Youtube video url")\nparser.add_argument("-pu", "--PlayListUrl", help="Playlist url")\nparser.add_argument("-f", "--Format", help="Format of downloaded files - mp3 or mp4")\nparser.add_argument("-d", "--Destination", help="Destination folder of downloaded files")\n\nformat="mp3"\n\nargs = parser.parse_args()\n\nif not args.Url and not args.PlayListUrl:\n    print("Please provide youtube playlist url via -pu or --PlayListUrl argument param or Youtube video url via -u or --Url")\n    exit()\nif not args.Destination:\n    print("Please provide destination folder name via -d or --Destination argument param")\n    exit()\nif not args.Format:\n    print("Format (-f or --Format not provided - default set to mp3")\nelse:\n    format=args.Format\n\nDOWNLOAD_DIR = os.getcwd() + "\\\\out\\\\" + args.Destination\n\n# Sprawdzamy czy wprowadzony zosta\u0142 url do Playlisty (-pu) czy url do filmu (-u) i na podstawie url \u015bci\u0105gany jest film lub playlista\nif(args.PlayListUrl):\n    playlist = Playlist(args.PlayListUrl)\n    print (f"Downloading {len(playlist.videos)} files from playlist with url: {args.Url}, with format: {args.Format}, to dir: {DOWNLOAD_DIR}")\n\n    for video in playlist.videos:\n        downloadByVideo(video)\n\nif (args.Url):\n    video = YouTube(args.Url)\n    downloadByVideo(video)\n')))}s.isMDXComponent=!0}}]);