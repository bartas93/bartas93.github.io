"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[3645],{8860:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>u});var r=t(7953);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var m=r.createContext({}),c=function(e){var a=r.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},p=function(e){var a=c(e.components);return r.createElement(m.Provider,{value:a},e.children)},y="mdxType",s={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},b=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),y=c(t),b=n,u=y["".concat(m,".").concat(b)]||y[b]||s[b]||o;return t?r.createElement(u,i(i({ref:a},p),{},{components:t})):r.createElement(u,i({ref:a},p))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l[y]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},3608:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(3911),n=(t(7953),t(8860));const o={slug:"jvm-memory-allocation-of-objects",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",authors:"bjab",tags:["jvm","jol","heap","memory","references"]},i="W skr\xf3cie",l={permalink:"/pl/blog/jvm-memory-allocation-of-objects",source:"@site/i18n/pl/docusaurus-plugin-content-blog/2024-05-16-jvm-memory-allocation-of-objects.md",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",description:"- Ka\u017cdy obiekt ma narzut pami\u0119ci (metadane) (12-16 bajt\xf3w na metadane - referencja, headery + pami\u0119\u0107 na dane).",date:"2024-05-16T00:00:00.000Z",formattedDate:"16 maja 2024",tags:[{label:"jvm",permalink:"/pl/blog/tags/jvm"},{label:"jol",permalink:"/pl/blog/tags/jol"},{label:"heap",permalink:"/pl/blog/tags/heap"},{label:"memory",permalink:"/pl/blog/tags/memory"},{label:"references",permalink:"/pl/blog/tags/references"}],readingTime:14.34,hasTruncateMarker:!0,authors:[{name:"Bartek Jab\u0142o\u0144ski",title:"Backend Cloud Developer",url:"https://bartas93.github.io",imageURL:"/images/bartek_jablonski_2.png",key:"bjab"}],frontMatter:{slug:"jvm-memory-allocation-of-objects",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",authors:"bjab",tags:["jvm","jol","heap","memory","references"]},nextItem:{title:"Wyra\u017cenia regularne",permalink:"/pl/blog/regular-expressions"}},m={authorsImageUrls:[void 0]},c=[],p={toc:c},y="wrapper";function s(e){let{components:a,...t}=e;return(0,n.yg)(y,(0,r.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Ka\u017cdy obiekt ma narzut pami\u0119ci (metadane) (12-16 bajt\xf3w na metadane - referencja, headery + pami\u0119\u0107 na dane)."),(0,n.yg)("li",{parentName:"ul"},"Procesory (CPU) mog\u0105 by\u0107 32 bitowe (4 byte - maxymalnie 4 GB pami\u0119ci RAM) lub 64 bitowe (8 byte). To oznacza tyle, \u017ce CPU ma dost\u0119p do ty\u0142u adres\xf3w ile mo\u017cna zapisa\u0107 w 4 lub 8 bytach. Dodatkowo CPU pobiera paczkami dane z RAM po 8 byt\xf3w naraz."),(0,n.yg)("li",{parentName:"ul"},"Padding - wyr\xf3wnanie do 8 bajt\xf3w - czyli obiekty zajmuj\u0105 pami\u0119\u0107 r\xf3wn\u0105 wielokrotno\u015bci 8 bajt\xf3w. Mo\u017cna to zwi\u0119kszy\u0107 bo ogranicza to u\u017cycie maksymalnego heapa na poziomie 32 GB."),(0,n.yg)("li",{parentName:"ul"},"Referencja zajmuje 4 (32bit CPU lub 64bit CPU z Compressed References (default)) lub 8 bajt\xf3w (64bit CPU).",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Maksymalny heap dla Compressed References = 32 GB - wykorzystanie przesuni\u0119cia bitowego o 3 miejsca ze wzgl\u0119du na to \u017ce zapis 8 byte zawsze po prawej stronie ma trzy zera. (8 byte bo jest wyr\xf3wnanie do 8 byt\xf3w). Dlatego mo\u017cemy u\u017cy\u0107 32 GB heapa zamiast 4 GB."),(0,n.yg)("li",{parentName:"ul"},"Gdy u\u017cywamy 64bit CPU z Compressed References i zwi\u0119kszymy Pami\u0119\u0107 heapa powy\u017cej 32 GB mo\u017cemy mie\u0107 problemy z aplikacj\u0105 i znacz\u0105cy wzrost zajmowanego heapa ze wzgl\u0119du na zmian\u0119 pami\u0119ci referencji z 4 bytes do 8 bytes - np. zmiana z -Xmx31g do -Xmx33g mo\u017ce spowodowa\u0107 wzrost zaj\u0119cia danych o 40% (w zale\u017cno\u015bci od danych)")))))}s.isMDXComponent=!0}}]);