"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[1307],{4733:a=>{a.exports=JSON.parse('{"blogPosts":[{"id":"regular-expressions","metadata":{"permalink":"/pl/blog/regular-expressions","source":"@site/i18n/pl/docusaurus-plugin-content-blog/2024-05-16-regular-expressions.md","title":"Wyra\u017cenia regularne","description":"- Sk\u0142ada si\u0119 z sekwencji atom\xf3w (atom to litera\u0142 - litera, cyfra, znak specjalny)","date":"2024-05-16T00:00:00.000Z","formattedDate":"16 maja 2024","tags":[{"label":"others","permalink":"/pl/blog/tags/others"}],"readingTime":2.525,"hasTruncateMarker":true,"authors":[{"name":"Bartek Jab\u0142o\u0144ski","title":"Backend Cloud Developer","url":"https://bartas93.github.io","imageURL":"/images/bartek_jablonski_2.png","key":"bjab"}],"frontMatter":{"slug":"regular-expressions","title":"Wyra\u017cenia regularne","authors":"bjab","tags":["others"]},"nextItem":{"title":"Obliczanie pami\u0119ci zajmowanej przez String - JOL Footprint","permalink":"/pl/blog/string-in-jvm-memory"}},"content":"- Sk\u0142ada si\u0119 z sekwencji atom\xf3w (atom to litera\u0142 - litera, cyfra, znak specjalny)\\r\\n- Wielko\u015b\u0107 liter ma znaczenie\\r\\n- Mo\u017cna przetestowa\u0107 regexy w narz\u0119dziach online typu: https://regex101.com/\\r\\n\x3c!-- truncate --\x3e\\r\\n# Kwantyfikatory\\r\\n\\r\\nKwantyfikator m\xf3wi ile mo\u017ce by\u0107 wyst\u0105pie\u0144 danego atomu. Kwantyfikator odnosi si\u0119 do elementu po\u0142o\u017conego po lewej stronie od kwantyfikatora. Je\u017celi przy atomie nie ma kwantyfikatora to oznacza, \u017ce atom b\u0119dzie mia\u0142 jedno wyst\u0105pienie (w przyk\u0142adach poni\u017cej atom `b` ma zawsze jedno wyst\u0105pienie.\\r\\n\\r\\n- `*` - zero lub wi\u0119cej wyst\u0105pie\u0144\\r\\n\\r\\n  np. `a*b` mo\u017ce przek\u0142ada\u0107 si\u0119 mi\u0119dzy innymi na wyra\u017cenia: `b`, `ab`, `aab`, `aaaaaaab`, \u2026\\r\\n\\r\\n- `+` - jedno lub wi\u0119cej wyst\u0105pie\u0144\\r\\n\\r\\n  np. `a+b` mo\u017ce przek\u0142ada\u0107 si\u0119 mi\u0119dzy innymi na wyra\u017cenia: `ab`, `aab`, `aaaaab`, \u2026\\r\\n\\r\\n- `?` - zero lub jedno wyst\u0105pienie\\r\\n\\r\\n  np. `a?b` przek\u0142ada si\u0119 na `b`, `ab`\\r\\n\\r\\n- `{min,max}` - Co najmniej `min` wyst\u0105pie\u0144, a maksymalnie `max` wyst\u0105pie\u0144\\r\\n\\r\\n  np. `a{2,4}b` przek\u0142ada si\u0119 na wyra\u017cenia: `aab`, `aaab`, `aaaab`\\r\\n\\r\\n- `{min,}` - Co najmniej `min` wyst\u0105pie\u0144. Maksymalnie mo\u017ce by\u0107 niesko\u0144czenie wiele.\\r\\n- `{,max}` - Nie ma minimalnej liczby wyst\u0105pie\u0144, a maksymalnie mo\u017ce by\u0107 `max` wyst\u0105pie\u0144\\r\\n- `{n}` - dok\u0142adna liczba wyst\u0105pie\u0144 r\xf3wna `n`\\r\\n\\r\\n  np. `a{4}b` - przek\u0142ada si\u0119 na: `aaaab`\\r\\n\\r\\n\\r\\n# Zakresy []\\r\\n\\r\\nZakres oznacza, \u017ce wyra\u017cenie mo\u017ce by\u0107 jedn\u0105 liter\u0105/cyfr\u0105 z zakresu. My\u015blnik `-` oznacza zakres od, do.\\r\\n\\r\\n- `[abc]` - oznacza, \u017ce wyra\u017ceniem b\u0119dzie `a` lub `b` lub `c` (tylko jedna litera)\\r\\n- `[a-bB-Z]` - wyra\u017ceniem mo\u017ce by\u0107 `a`, `b`, `B`, `C`, `D`, \u2026, `Z`\\r\\n- `[a-Z]` - wyra\u017ceniem mo\u017ce by\u0107 ka\u017cdy angloj\u0119zyczny znak (du\u017cy lub ma\u0142y)\\r\\n- `[0-9]` - wyra\u017ceniem mo\u017ce by\u0107 ka\u017cda cyfra\\r\\n- `[a-Z\u0105\u0107\u0119\u0142\u0144\xf3\u015b\u017a\u017c\u0104\u0118\u0141\u0143\xd3\u015a\u0179\u017b]` - zakres wszystkich polskich znak\xf3w.\\r\\n\\r\\n# Grupy ()\\r\\n\\r\\n- `(ab){2}` - oznacza wyra\u017cenie `abab`\\r\\n\\r\\n# Flagi\\r\\n\\r\\n- `(?i)` - ignorowanie wielko\u015bci liter z prawej strony od tego znaku\\r\\n\\r\\n# Znaki specjalne\\r\\n\\r\\n- `.` - ka\u017cdy znak\\r\\n- `$` - koniec wiersza (je\u015bli u\u017cyjemy ten znak na ko\u0144cu to oznacza, \u017ce nie ma \u017cadnego znaku po poszukiwanym wyra\u017ceniu.\\r\\n- `^` - pocz\u0105tek wiersza (je\u015bli u\u017cyjemy ten znak na pocz\u0105tku to oznacza, \u017ce nie ma \u017cadnego znaku przed poszukiwanym wyra\u017ceniem.\\r\\n- `[^e]` - negacja - wyra\u017cenie nie b\u0119dzie zawiera\u0142o litery `e`.\\r\\n- `|` - znak oznacza logiczne lub, czyli wyra\u017ceniem b\u0119dzie dowolne wyra\u017cenie oddzielone znakiem `|`\\r\\n\\r\\n  np. `a|b` - oznacza `a` lub `b`\\r\\n\\r\\n- `\\\\s` - Spacja, tabulator lub znak nowego wiersza\\r\\n- `\\\\S` - Znak kt\xf3ry jest negacj\u0105 `\\\\s`, czyli znak, kt\xf3ry nie jest spacj\u0105, tabulatorem lub znakiem nowego wiersza\\r\\n- `\\\\w` - litera, cyfra lub znak `_` (zapis r\xf3wnowa\u017cny do `[a-Z_]`\\r\\n- `\\\\W` - znak kt\xf3ry jest negacj\u0105 `\\\\w` czyli taki znak, kt\xf3ry nie jest liter\u0105, cyfr\u0105 lub znakiem `_`\\r\\n- `\\\\d` - cyfra (digit) (zapis r\xf3wnowa\u017cny do `[0-9]`)\\r\\n- `\\\\D` - znak kt\xf3ry jest negacj\u0105 `\\\\d` czyli taki znak, kt\xf3ry nie jest cyfr\u0105\\r\\n- `\\\\b` - Dowolny znak odst\u0119pu, pocz\u0105tku \u0142ancucha, ko\u0144ca \u0142a\u0144cucha oraz dowolnego znaku, kt\xf3ry nie jest ani liter\u0105 ani cyfr\u0105.\\r\\n\\r\\n**Je\u017celi chcemy u\u017cy\u0107 w wyra\u017ceniu regularnym jednego ze znak\xf3w specjalnych takich jak `.`, `*`, `/`, `?`, `:`, `.`, `^`, `+`, `\\\\`, `=`, `|`, to poprzedzamy go znakiem `\\\\` czyli np. `\\\\.`**"},{"id":"string-in-jvm-memory","metadata":{"permalink":"/pl/blog/string-in-jvm-memory","source":"@site/i18n/pl/docusaurus-plugin-content-blog/2024-05-16-String-memory-usage-jvm.md","title":"Obliczanie pami\u0119ci zajmowanej przez String - JOL Footprint","description":"W skr\xf3cie:","date":"2024-05-16T00:00:00.000Z","formattedDate":"16 maja 2024","tags":[{"label":"jvm","permalink":"/pl/blog/tags/jvm"},{"label":"jol","permalink":"/pl/blog/tags/jol"},{"label":"string","permalink":"/pl/blog/tags/string"},{"label":"memory","permalink":"/pl/blog/tags/memory"}],"readingTime":6.27,"hasTruncateMarker":true,"authors":[{"name":"Bartek Jab\u0142o\u0144ski","title":"Backend Cloud Developer","url":"https://bartas93.github.io","imageURL":"/images/bartek_jablonski_2.png","key":"bjab"}],"frontMatter":{"slug":"string-in-jvm-memory","title":"Obliczanie pami\u0119ci zajmowanej przez String - JOL Footprint","authors":"bjab","tags":["jvm","jol","string","memory"]},"prevItem":{"title":"Wyra\u017cenia regularne","permalink":"/pl/blog/regular-expressions"},"nextItem":{"title":"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu","permalink":"/pl/blog/python-youtube-downloader"}},"content":"## W skr\xf3cie:\\r\\n\\r\\n- Na pami\u0119\u0107 obiektu String sk\u0142ada si\u0119 24 byte na metadane + ilo\u015b\u0107 znak\xf3w razy 1 byte lub 2 byte w zale\u017cno\u015bci od warto\u015bci coder\\r\\n    - Metadane : mark word x2 (4 bytes x2 = 8 bytes), klass word (4 bytes), referencja do tablicy byte[] lub char[] (4 byte), hash (4 byte), hashIsZero (1 byte), coder (1 byte),  padding (2 byte)\\r\\n- Obiekt String ma 2 dodatkowe flagi:\\r\\n    - gdy `coder =1` to kodowanie UTF-16 (2 bytes na znak)\\r\\n    - gdy `coder = 0` to kodowanie LATIN-1 (1 byte na znak)\\r\\n    - hashIsZero jest to flaga kt\xf3ra m\xf3wi czy obliczenie hasha zosta\u0142o ju\u017c wykonane\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## JOL - String\\r\\n\\r\\nOd Java 9 u\u017cywamy Compact String czyli je\u015bli to mo\u017cliwe to u\u017cywamy kodowania LATIN-1 a jak nie to ustawiany jest coder=1 i u\u017cywamy UTF-16.\\r\\n\\r\\n(Przed Java 9 wszystko sprowadza\u0142o si\u0119 do char[] i ka\u017cda literka by\u0142a r\xf3wna 2 byte Utf-16.)\\r\\n\\r\\nJe\u015bli chocia\u017c jeden znak b\u0119dzie inny ni\u017c latin-1 (1 byte) to ka\u017cdy znak w Stringu jest kodowany w utf16 (2 byte).\\r\\n\\r\\n```java\\r\\nString utf16String = \\"Bartosz Jab\u0142o\u0144ski\\"; // 17 znak\xf3w x 2 bytes = 34 bytes\\r\\nSystem.out.println(ClassLayout.parseInstance(utf16String).toPrintable());\\r\\nSystem.out.println(GraphLayout.parseInstance(utf16String).toFootprint());\\r\\nSystem.out.println(ClassLayout.parseInstance(utf16String.getBytes()).toPrintable());\\r\\nSystem.out.println(ClassLayout.parseInstance(utf16String.toCharArray()).toPrintable());\\r\\n       \\r\\nString latin1String = \\"Bartosz Jablonski\\"; // 17 znak\xf3w x 1 bytes = 17 bytes\\r\\nSystem.out.println(ClassLayout.parseInstance(latin1String).toPrintable());\\r\\nSystem.out.println(GraphLayout.parseInstance(latin1String).toFootprint());\\r\\nSystem.out.println(ClassLayout.parseInstance(latin1String.getBytes()).toPrintable());\\r\\nSystem.out.println(ClassLayout.parseInstance(latin1String.toCharArray()).toPrintable());\\r\\n```\\r\\n\\r\\n```\\r\\n#### Bartosz Jab\u0142o\u0144ski - UTF-16 - coder:1\\r\\njava.lang.String object internals:\\r\\n OFFSET  SIZE      TYPE DESCRIPTION                               VALUE\\r\\n      0     4           (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4           (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4           (object header)                           d8 e8 00 00 (11011000 11101000 00000000 00000000) (59608)\\r\\n     12     4       int String.hash                               0\\r\\n     16     1      byte String.coder                              1\\r\\n     17     1   boolean String.hashIsZero                         false\\r\\n     18     2           (alignment/padding gap)                  \\r\\n     20     4    byte[] String.value                              [66, 0, 97, 0, 114, 0, 116, 0, 111, 0, 115, 0, 122, 0, 32, 0, 74, 0, 97, 0, 98, 0, 66, 1, 111, 0, 68, 1, 115, 0, 107, 0, 105, 0]\\r\\nInstance size: 24 bytes\\r\\nSpace losses: 2 bytes internal + 0 bytes external = 2 bytes total\\r\\n\\r\\njava.lang.String@7dc222aed footprint:\\r\\n     COUNT       AVG       SUM   DESCRIPTION\\r\\n         1        56        56   [B\\r\\n         1        24        24   java.lang.String\\r\\n         2                  80   (total)\\r\\n\\r\\n[B object internals:\\r\\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\\r\\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4        (object header)                           c0 22 00 00 (11000000 00100010 00000000 00000000) (8896)\\r\\n     12     4        (object header)                           13 00 00 00 (00010011 00000000 00000000 00000000) (19)\\r\\n     16    19   byte [B.<elements>                             N/A\\r\\n     35     5        (loss due to the next object alignment)\\r\\nInstance size: 40 bytes\\r\\nSpace losses: 0 bytes internal + 5 bytes external = 5 bytes total\\r\\n\\r\\n[C object internals:\\r\\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\\r\\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4        (object header)                           f0 1c 00 00 (11110000 00011100 00000000 00000000) (7408)\\r\\n     12     4        (object header)                           11 00 00 00 (00010001 00000000 00000000 00000000) (17)\\r\\n     16    34   char [C.<elements>                             N/A\\r\\n     50     6        (loss due to the next object alignment)\\r\\nInstance size: 56 bytes\\r\\nSpace losses: 0 bytes internal + 6 bytes external = 6 bytes total\\r\\n```\\r\\n\\r\\nW pierwszym przypadku dla `Bartosz Jab\u0142o\u0144ski` gdzie zawarli\u015bmy polskie znaki niezawieraj\u0105ce si\u0119 w LATIN-1 wida\u0107, \u017ce String ma flag\u0119 `coder` ustawion\u0105 na `1` czyli u\u017cywa kodowania typu `UTF-16` (2 byte per znak).\\r\\n\\r\\nFootprint pokazuje deep size obiektu String (17 znakowy) wynosi 80 bytes. Na to sk\u0142ada si\u0119 String i jego metadane i pod obiekt Stringa czyli tablica char[] w kodowaniu UTF-16 (2byte per znak).\\r\\nPodsumowuj\u0105c:\\r\\n\\r\\n- 24 bytes - String z referencj\u0105 zajmuje 24 bytes (12 bytes na metadane (headery) + 4 bytes na hash(int) + 1 byte na coder, + 1 byte na hashIsZero + 4 bytes referencji do tablicy char\xf3w  + 2 byte na alligment padding).\\r\\n    - Gdzie coder odpowiada za:\\r\\n\\r\\n\\r\\n        Jest to warto\u015b\u0107 zwi\u0105zana \u015bci\u015ble z implementacj\u0105 JVM (hotspot). Jest to identyfikator kodowania u\u017cywany do kodowania bajt\xf3w. Obs\u0142ugiwane warto\u015bci to LATIN1 (coder=0) i UTF16(coder=1).\\r\\n        Je\u015bli chocia\u017c jedna literka **nie zawiera si\u0119 w LATIN1** to coder=1 i ca\u0142y String b\u0119dzie kodowany do UTF-16 czyli w pami\u0119ci zajmie (n literek * 2 bytes).\\r\\n        \\r\\n    - Gdzie hashIsZero odpowiada za:\\r\\n        \\r\\n        \\r\\n        To pole m\xf3wi JVM czy mo\u017cna omin\u0105\u0107 ponownemu obliczaniu hashu. (taki rodzaj cachu)\\r\\n\\r\\n- 56 bytes - Tablica byte[] zajmuje 56 bytes na co sk\u0142ada si\u0119: 12 byte metadanych (header\xf3w) + 4 byte metadane dotycz\u0105ce tablicy (length) + dane 17 znak\xf3w * 2 byte (34 byte) = 50 byte + 6 byt\xf3w na wyr\xf3wnanie. Obrazuje to nieintuicyjnie linia kodu: `System.out.println(ClassLayout.parseInstance(utf16String.toCharArray()).toPrintable());`\\r\\n\\r\\n```java\\r\\n#### Bartosz Jablonski - LATIN-1 - coder:0\\r\\njava.lang.String object internals:\\r\\n OFFSET  SIZE      TYPE DESCRIPTION                               VALUE\\r\\n      0     4           (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4           (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4           (object header)                           d8 e8 00 00 (11011000 11101000 00000000 00000000) (59608)\\r\\n     12     4       int String.hash                               0\\r\\n     16     1      byte String.coder                              0\\r\\n     17     1   boolean String.hashIsZero                         false\\r\\n     18     2           (alignment/padding gap)                  \\r\\n     20     4    byte[] String.value                              [66, 97, 114, 116, 111, 115, 122, 32, 74, 97, 98, 108, 111, 110, 115, 107, 105]\\r\\nInstance size: 24 bytes\\r\\nSpace losses: 2 bytes internal + 0 bytes external = 2 bytes total\\r\\n\\r\\njava.lang.String@48a242ced footprint:\\r\\n     COUNT       AVG       SUM   DESCRIPTION\\r\\n         1        40        40   [B\\r\\n         1        24        24   java.lang.String\\r\\n         2                  64   (total)\\r\\n\\r\\n[B object internals:\\r\\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\\r\\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4        (object header)                           c0 22 00 00 (11000000 00100010 00000000 00000000) (8896)\\r\\n     12     4        (object header)                           11 00 00 00 (00010001 00000000 00000000 00000000) (17)\\r\\n     16    17   byte [B.<elements>                             N/A\\r\\n     33     7        (loss due to the next object alignment)\\r\\nInstance size: 40 bytes\\r\\nSpace losses: 0 bytes internal + 7 bytes external = 7 bytes total\\r\\n\\r\\n[C object internals:\\r\\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\\r\\n      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)\\r\\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\\r\\n      8     4        (object header)                           f0 1c 00 00 (11110000 00011100 00000000 00000000) (7408)\\r\\n     12     4        (object header)                           11 00 00 00 (00010001 00000000 00000000 00000000) (17)\\r\\n     16    34   char [C.<elements>                             N/A\\r\\n     50     6        (loss due to the next object alignment)\\r\\nInstance size: 56 bytes\\r\\nSpace losses: 0 bytes internal + 6 bytes external = 6 bytes total\\r\\n```\\r\\n\\r\\nW drugim przypadku dla `Bartosz Jablonski` gdzie nie zawarli\u015bmy polskich znak\xf3w, wida\u0107, \u017ce String ma flag\u0119 coder ustawion\u0105 na 0 czyli u\u017cywa kodowania typu LATIN-1 (1 byte per znak).\\r\\n\\r\\nFootprint pokazuje deep size obiektu String (17 znakowy) wynosi 64 bytes. Na to sk\u0142ada si\u0119 String i jego metadane i pod obiekt Stringa czyli tablica byte[] w kodowaniu LATIN-1 (1 byte per znak) .\\r\\n\\r\\n- String z referencj\u0105 zajmuje 24 bytes (12 bytes na metadane (headery) + 4 bytes na hash(int) + 1 byte na coder + 1 byte na hashIsZero + 4 bytes referencji do tablicy byt\xf3w + 2 byte na alligment padding).\\r\\n- Tablica byte[] zajmuje 40 bytes na co sk\u0142ada si\u0119: 12 byte metadanych (header\xf3w) + 4 byte metadane dotycz\u0105ce tablicy (length) + dane 17 znak\xf3w * 1 byte (17 byte) = 33 byte + 7 byt\xf3w na wyr\xf3wnanie.\\r\\n\\r\\nObrazuje to linia kodu: `System.out.println(ClassLayout.parseInstance(latin1String.getBytes()).toPrintable());`\\r\\n\\r\\nDzi\u0119ki fladze `coder` i braku znak\xf3w specjalnych mamy zysk w mniejszej ilo\u015bci zajmowanej pami\u0119ci r\xf3wny 16 byt\xf3w - co dzieje si\u0119 bez naszej ingerencji programistycznej."},{"id":"python-youtube-downloader","metadata":{"permalink":"/pl/blog/python-youtube-downloader","source":"@site/i18n/pl/docusaurus-plugin-content-blog/2024-05-16-youtube-downloader.md","title":"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu","description":"Ostatnio zrezygnowa\u0142em z Spotify Premium i s\u0142uchanie muzyki oraz podcast\xf3w w samolocie sta\u0142o si\u0119 trudniejsze. Do tej pory \u015bci\u0105ga\u0142em mp3 i mp4 za pomoc\u0105 narz\u0119dzi online typu:","date":"2024-05-16T00:00:00.000Z","formattedDate":"16 maja 2024","tags":[{"label":"python","permalink":"/pl/blog/tags/python"},{"label":"scripts","permalink":"/pl/blog/tags/scripts"},{"label":"tools","permalink":"/pl/blog/tags/tools"}],"readingTime":3.165,"hasTruncateMarker":true,"authors":[{"name":"Bartek Jab\u0142o\u0144ski","title":"Backend Cloud Developer","url":"https://bartas93.github.io","imageURL":"/images/bartek_jablonski_2.png","key":"bjab"}],"frontMatter":{"slug":"python-youtube-downloader","title":"\u015aci\u0105gaj Playlisty z YouTube bez reklam za darmo - za pomoc\u0105 prostego skryptu","authors":"bjab","tags":["python","scripts","tools"]},"prevItem":{"title":"Obliczanie pami\u0119ci zajmowanej przez String - JOL Footprint","permalink":"/pl/blog/string-in-jvm-memory"}},"content":"Ostatnio zrezygnowa\u0142em z Spotify Premium i s\u0142uchanie muzyki oraz podcast\xf3w w samolocie sta\u0142o si\u0119 trudniejsze. Do tej pory \u015bci\u0105ga\u0142em mp3 i mp4 za pomoc\u0105 narz\u0119dzi online typu:\\r\\n\\r\\n- https://notube.net/pl/youtube-app-v103\\r\\n- https://y2down.cc/pl/youtube-mp4.html i inne\\r\\n\\r\\nNiestety narz\u0119dzia tego typu pozwalaj\u0105 na \u015bci\u0105ganie pojedynczych film\xf3w i zarzucaj\u0105 nas mas\u0105 inwazyjnych reklam. Aby omin\u0105\u0107 te problemy, napiszemy skrypt w j\u0119zyku python, kt\xf3ry po podaniu linku do playlisty lub filmu \u015bci\u0105gnie nam mp3 lub mp4.\\r\\n\\r\\nDo napisania skryptu u\u017cyjemy bibliotek\u0119 [pytube](https://pytube.io/en/latest/).\\r\\n\\r\\nCa\u0142y skrypt mo\u017cecie znale\u017a\u0107 w repozytorium gitlab: https://gitlab.com/bart_as93/youtube-downloader\\r\\n\x3c!-- truncate --\x3e\\r\\n### 1. Konfiguracja wst\u0119pna\\r\\n\\r\\nPobierz repozytorium na lokaln\u0105 maszyn\u0119:\\r\\n\\r\\n```bash\\r\\ngit clone https://gitlab.com/bart_as93/youtube-downloader.git\\r\\ncd youtube-downloader\\r\\n```\\r\\n\\r\\nSprawd\u017a wersje pythona\\r\\n\\r\\n```bash\\r\\npython --version\\r\\n```\\r\\n\\r\\nW moim przypadku `Python 3.11.4`\\r\\n\\r\\nNast\u0119pnie instalujemy zale\u017cno\u015bci\\r\\n\\r\\n```bash\\r\\npip install -r requirements.txt\\r\\n```\\r\\n\\r\\nNast\u0119pnie uruchamiamy skrypt np.:\\r\\n\\r\\n```bash\\r\\npython .\\\\downloader.py -u https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music -f mp4\\r\\n```\\r\\n\\r\\nSkrypt przyjmuje 4 argumenty:\\r\\n\\r\\n- `-f` - jeden z format\xf3w: mp3 albo mp4\\r\\n- `-d` - docelowy folder w kt\xf3rym maj\u0105 znajdowa\u0107 si\u0119 \u015bci\u0105gni\u0119te pliki\\r\\n- i jedno z po\u017cniszych:\\r\\n  - `-u` - Url do wideo na platformie YouTube\\r\\n  - `-pu` - Url do playlisty na platformie Youtube\\r\\n\\r\\n### Pobieranie YouTube video w formacie mp4\\r\\n\\r\\nAby \u015bci\u0105gn\u0105\u0107 film YouTube trzeba u\u017cy\u0107 flagi `-u <link_do_filmu>` oraz flag\u0119 `-f mp4`\\r\\n\\r\\n```bash\\r\\npython .\\\\downloader.py -u https://www.youtube.com/watch?v=a59gmGkq_pw -d movies -f mp4\\r\\n```\\r\\n\\r\\n### Pobieranie YouTube video w formacie mp3\\r\\n\\r\\nAby \u015bci\u0105gn\u0105\u0107 audio z YouTube trzeba u\u017cy\u0107 flagi `-u <link_do_filmu>` oraz flag\u0119 `-f mp3`\\r\\n\\r\\n```bash\\r\\npython .\\\\downloader.py -u https://www.youtube.com/watch?v=a59gmGkq_pw -d music -f mp3\\r\\n```\\r\\n\\r\\n### Pobieranie playlisty YouTube w formacie mp4\\r\\n\\r\\nAby \u015bci\u0105gn\u0105\u0107 filmy z Playlisty YouTube trzeba u\u017cy\u0107 flagi `-pu <link_do_playlisty>` oraz flag\u0119 `-f mp4`\\r\\n\\r\\n```bash\\r\\npython .\\\\downloader.py -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music-f mp4\\r\\n```\\r\\n\\r\\n### Pobieranie YouTube Playlist w formacie mp3\\r\\n\\r\\nAby \u015bci\u0105gn\u0105\u0107 audio z Playlisty YouTube trzeba u\u017cy\u0107 flagi `-pu <link_do_playlisty>` oraz flag\u0119 `-f mp3`\\r\\n\\r\\n```bash\\r\\npython .\\\\downloader.py -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d movies -f mp3\\r\\n```\\r\\n\\r\\n## Om\xf3wienie kodu (komentarze):\\r\\n\\r\\n```python\\r\\nimport argparse\\r\\nimport os\\r\\nfrom pytube import Playlist\\r\\nfrom pytube import YouTube\\r\\n\\r\\n# Program obs\u0142uguje 2 formaty mp3 i mp4. W sekcji else przy innym formacie program jest wy\u0142\u0105czany\\r\\ndef downloadByVideo(vid):\\r\\n    print(\'downloading : {} - {} with url : {}\'.format(video.author, video.title, video.watch_url))\\r\\n    global type\\r\\n    vidFileName = vid.author + \\" - \\" + vid.title + \\".\\" + format\\r\\n    if format == \'mp3\':\\r\\n        type = \'audio\'\\r\\n# Na obiekcie video odwo\u0142ujemy si\u0119 do streams, filtrujemy tylko audio i wywo\u0142ujemy metod\u0119 download z opcjami opisuj\u0105cymi docelowy katalog w kt\xf3rym zostanie zapisany plik oraz nazw\u0119 pliku\\r\\n        vid.streams. \\\\\\r\\n            filter(only_audio=True).desc().first(). \\\\\\r\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\\r\\n    elif format == \'mp4\':\\r\\n        type = \'video\'\\r\\n# Na obiekcie video odwo\u0142ujemy si\u0119 do streams, filtrujemy tylko video, sortujemy od najwi\u0119kszego resolution i wywo\u0142ujemy metod\u0119 download z opcjami opisuj\u0105cymi docelowy katalog w kt\xf3rym zostanie zapisany plik oraz nazw\u0119 pliku\\r\\n        vid.streams. \\\\\\r\\n            filter(type=type, progressive=True, file_extension=format). \\\\\\r\\n            order_by(\'resolution\'). \\\\\\r\\n            desc(). \\\\\\r\\n            first(). \\\\\\r\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\\r\\n    else:\\r\\n        print(f\\"Not supported format type: {format}\\")\\r\\n        exit()\\r\\n\\r\\n# Obs\u0142uga parametr\xf3w command line i sprawdzenie wymaganych p\xf3l\\r\\nparser = argparse.ArgumentParser()\\r\\n\\r\\nparser.add_argument(\\"-u\\", \\"--Url\\", help=\\"Youtube video url\\")\\r\\nparser.add_argument(\\"-pu\\", \\"--PlayListUrl\\", help=\\"Playlist url\\")\\r\\nparser.add_argument(\\"-f\\", \\"--Format\\", help=\\"Format of downloaded files - mp3 or mp4\\")\\r\\nparser.add_argument(\\"-d\\", \\"--Destination\\", help=\\"Destination folder of downloaded files\\")\\r\\n\\r\\nformat=\\"mp3\\"\\r\\n\\r\\nargs = parser.parse_args()\\r\\n\\r\\nif not args.Url and not args.PlayListUrl:\\r\\n    print(\\"Please provide youtube playlist url via -pu or --PlayListUrl argument param or Youtube video url via -u or --Url\\")\\r\\n    exit()\\r\\nif not args.Destination:\\r\\n    print(\\"Please provide destination folder name via -d or --Destination argument param\\")\\r\\n    exit()\\r\\nif not args.Format:\\r\\n    print(\\"Format (-f or --Format not provided - default set to mp3\\")\\r\\nelse:\\r\\n    format=args.Format\\r\\n\\r\\nDOWNLOAD_DIR = os.getcwd() + \\"\\\\\\\\out\\\\\\\\\\" + args.Destination\\r\\n\\r\\n# Sprawdzamy czy wprowadzony zosta\u0142 url do Playlisty (-pu) czy url do filmu (-u) i na podstawie url \u015bci\u0105gany jest film lub playlista\\r\\nif(args.PlayListUrl):\\r\\n    playlist = Playlist(args.PlayListUrl)\\r\\n    print (f\\"Downloading {len(playlist.videos)} files from playlist with url: {args.Url}, with format: {args.Format}, to dir: {DOWNLOAD_DIR}\\")\\r\\n\\r\\n    for video in playlist.videos:\\r\\n        downloadByVideo(video)\\r\\n\\r\\nif (args.Url):\\r\\n    video = YouTube(args.Url)\\r\\n    downloadByVideo(video)\\r\\n```"}]}')}}]);