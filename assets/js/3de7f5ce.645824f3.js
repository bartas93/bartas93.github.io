"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[9415],{15883:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=e(85893),i=e(11151);const s={sidebar_label:"Permutations",title:"Permutations"},o=void 0,a={id:"Algorithm/permutations",title:"Permutations",description:"- Description//leetcode.com/problems/permutations/",source:"@site/docs/Algorithm/permutations.mdx",sourceDirName:"Algorithm",slug:"/Algorithm/permutations",permalink:"/docs/Algorithm/permutations",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/docs/Algorithm/permutations.mdx",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1669338141,formattedLastUpdatedAt:"25 Nov 2022",frontMatter:{sidebar_label:"Permutations",title:"Permutations"},sidebar:"notesSidebar",previous:{title:"Design Linked List",permalink:"/docs/Algorithm/Design_Linked_List"},next:{title:"Math",permalink:"/docs/Math/"}},l={},u=[];function m(n){const t=Object.assign({ul:"ul",li:"li",a:"a",pre:"pre",code:"code"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Description: ",(0,r.jsx)(t.a,{href:"https://leetcode.com/problems/permutations/",children:"https://leetcode.com/problems/permutations/"})]}),"\n",(0,r.jsxs)(t.li,{children:["Inspired by: ",(0,r.jsx)(t.a,{href:"https://levelup.gitconnected.com/find-all-permutations-of-a-string-in-javascript-af41bfe072d2",children:"https://levelup.gitconnected.com/find-all-permutations-of-a-string-in-javascript-af41bfe072d2"})]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'let findPermutations = (string) => {\n  if (!string || typeof string !== "string") {\n    return "Please enter a string";\n  } else if (string.length < 2) {\n    return string;\n  }\n\n  let permutationsArray = [];\n\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n\n    let remainingChars =\n      string.slice(0, i) + string.slice(i + 1, string.length);\n\n    for (let permutation of findPermutations(remainingChars)) {\n      permutationsArray.push(char + permutation);\n    }\n  }\n  return permutationsArray;\n};\n\nconst permute = (nums) => {\n  if (nums < 2) {\n    return [nums];\n  }\n  const permutationsArray = [];\n\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const remainingNums = [\n      ...nums.slice(0, i),\n      ...nums.slice(i + 1, nums.length),\n    ];\n    for (const permutation of permute(remainingNums)) {\n      permutationsArray.push([num, ...permutation]);\n    }\n  }\n  return permutationsArray;\n};\n/**\n *\n * \u8f93\u5165\uff1anums = [1,2,3]\n * \u8f93\u51fa\uff1a[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n */\nconsole.log(permute([1, 2, 3]));\n'})})]})}const c=function(n={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),n.components);return t?(0,r.jsx)(t,Object.assign({},n,{children:(0,r.jsx)(m,n)})):m(n)}},11151:(n,t,e)=>{e.d(t,{Zo:()=>a,ah:()=>s});var r=e(67294);const i=r.createContext({});function s(n){const t=r.useContext(i);return r.useMemo((()=>"function"==typeof n?n(t):{...t,...n}),[t,n])}const o={};function a({components:n,children:t,disableParentContext:e}){let a;return a=e?"function"==typeof n?n({}):n||o:s(n),r.createElement(i.Provider,{value:a},t)}}}]);