"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[6412],{46769:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=s(85893),t=s(11151);const a={description:"Introduce the browser preload scanner."},o="What's a Preload Scanner?",i={id:"Web/Browser/preload-scanner",title:"What's a Preload Scanner?",description:"Introduce the browser preload scanner.",source:"@site/docs/Web/Browser/01-preload-scanner.mdx",sourceDirName:"Web/Browser",slug:"/Web/Browser/preload-scanner",permalink:"/docs/Web/Browser/preload-scanner",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/docs/Web/Browser/01-preload-scanner.mdx",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1695964360,formattedLastUpdatedAt:"29 Sept 2023",sidebarPosition:1,frontMatter:{description:"Introduce the browser preload scanner."},sidebar:"notesSidebar",previous:{title:"How Browsers Work?",permalink:"/docs/Web/Browser/how-browsers-work"},next:{title:"Reflow and Repaint",permalink:"/docs/Web/Browser/reflow-repaint"}},d={},c=[{value:"References",id:"references",level:2}];function l(e){const r=Object.assign({h1:"h1",blockquote:"blockquote",p:"p",a:"a",code:"code",admonition:"admonition",strong:"strong",h2:"h2",ul:"ul",li:"li"},(0,t.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"whats-a-preload-scanner",children:"What's a Preload Scanner?"}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"A preloader is like a parser that scans the HTML file while the main parser is processing the HTML code. Its role is to look for resources like stylesheets, scripts or images (that also need to be retrieved from a server) and request them. Hopefully, by the time the HTML is parsed, those resources are already downloaded and ready to be processed."}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Every browser has a primary HTML parser that tokenizes raw markup and processes it into ",(0,n.jsx)(r.a,{href:"/docs/Web/Browser/how-browsers-work#dom",children:"an object model"}),". The parser will pause when it finds a blocking resource, such as a stylesheet loaded with a ",(0,n.jsx)(r.code,{children:"<link>"})," element, or ",(0,n.jsx)(r.code,{children:"<script>"})," without an ",(0,n.jsx)(r.code,{children:"async"})," or ",(0,n.jsx)(r.code,{children:"defer"})," attribute."]}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsx)(r.p,{children:"Why does browsers block parsing and rendering of the page?"}),(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Ans:"})," The reason for this is that the browser can't know for sure if any given script will modify the DOM while the ",(0,n.jsx)(r.strong,{children:"primary HTML parser"})," is still doing its job."]})]}),"\n",(0,n.jsxs)("figure",{children:[(0,n.jsx)("img",{src:s(64233).Z,alt:"A diagram of both the primary HTML parser (left) and the preload scanner (right), which is the secondary HTML parser."}),(0,n.jsx)("figcaption",{children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)("strong",{children:"Fig. 1:"})," A diagram depicting how the preload scanner works\nin parallel with the primary HTML parser to speculatively load assets. Here,\nthe primary HTML parser is blocked as it loads and processes CSS before it\ncan begin processing image markup in the ",(0,n.jsx)("code",{children:"<body>"})," element,\nbut the preload scanner can look ahead in the raw markup to find that image\nresource and begin loading it before the primary HTML parser is unblocked."]})})]}),"\n",(0,n.jsx)(r.p,{children:"A preload scanner's role is to examine raw markup in order to find resources to fetch before the primary HTML parser discover them."}),"\n",(0,n.jsx)(r.admonition,{type:"warning",children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"CSS"})," files block both ",(0,n.jsx)(r.strong,{children:"rendering"})," and ",(0,n.jsx)(r.strong,{children:"parsing"}),"."]})}),"\n",(0,n.jsx)(r.h2,{id:"references",children:"References"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://web.dev/preload-scanner/",children:"Don't fight the browser preload scanner"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/",children:"How the Browser Pre-loader Makes Pages Load Faster"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://web.dev/critical-rendering-path-adding-interactivity-with-javascript/#:~:text=By%20default%2C%20JavaScript%20execution%20is,before%20proceeding%20with%20DOM%20construction.",children:'JavaScript execution is "parser blocking"'})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"https://stackoverflow.com/a/37759508",children:"Parser blocking vs render blocking"})}),"\n"]})]})}const h=function(e={}){const{wrapper:r}=Object.assign({},(0,t.ah)(),e.components);return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},64233:(e,r,s)=>{s.d(r,{Z:()=>n});const n=s.p+"assets/images/preload-scanner-3b7e6cf8d23b084a212ff9387701e658.png"},11151:(e,r,s)=>{s.d(r,{Zo:()=>i,ah:()=>a});var n=s(67294);const t=n.createContext({});function a(e){const r=n.useContext(t);return n.useMemo((()=>"function"==typeof e?e(r):{...r,...e}),[r,e])}const o={};function i({components:e,children:r,disableParentContext:s}){let i;return i=s?"function"==typeof e?e({}):e||o:a(e),n.createElement(t.Provider,{value:i},r)}}}]);