"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"regular-expressions","metadata":{"permalink":"/blog/regular-expressions","source":"@site/blog/2024-05-16-regular-expressions.md","title":"Regular expressions","description":"- Consists of a sequence of atoms (an atom is a literal - letter, digit, special character)","date":"2024-05-16T00:00:00.000Z","formattedDate":"May 16, 2024","tags":[{"label":"others","permalink":"/blog/tags/others"}],"readingTime":2.85,"hasTruncateMarker":false,"authors":[{"name":"Bartek Jab\u0142o\u0144ski","title":"Backend Cloud Developer","url":"https://bartas93.github.io","imageURL":"/images/bartek_jablonski_2.png","key":"bjab"}],"frontMatter":{"slug":"regular-expressions","title":"Regular expressions","authors":"bjab","tags":["others"]},"nextItem":{"title":"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle","permalink":"/blog/python-youtube-downloader"}},"content":"- Consists of a sequence of atoms (an atom is a literal - letter, digit, special character)\\r\\n- Letters are case sensitive\\r\\n- You can test regexes in online tools like: https://regex101.com/\\r\\n\\r\\n# Quantifiers\\r\\n\\r\\nThe quantifier tells how many occurrences of a given atom there can be. A quantifier refers to the element to the left of the quantifier. If there is no quantifier next to an atom, it means that the atom will have one occurrence (in the examples below, atom `b` always has one occurrence.\\r\\n\\r\\n- `*` - zero or more occurrences\\r\\n\\r\\n  e.g. `a*b` can translate into, among others, the following expressions: `b`, `ab`, `aab`, `aaaaaaab`, \u2026\\r\\n\\r\\n- `+` - one or more occurrences\\r\\n\\r\\n  e.g. `a+b` can translate into, among others, the following expressions: `ab`, `aab`, `aaaaab`, \u2026\\r\\n\\r\\n- `?` - zero or one occurrence\\r\\n\\r\\n  e.g. `a?b` translates to `b`, `ab`\\r\\n\\r\\n- `{min,max}` - At least `min` occurrences and maximum `max` occurrences\\r\\n\\r\\n  e.g. `a{2,4}b` translates into the expressions: `aab`, `aaab`, `aaaab`\\r\\n\\r\\n- `{min,}` - At least `min` occurrences. The maximum can be infinite.\\r\\n- `{,max}` - There is no minimum number of occurrences, and the maximum can be `max` occurrences\\r\\n- `{n}` - the exact number of occurrences equal to `n`\\r\\n\\r\\n  e.g. `a{4}b` - translates into: `aaaab`\\r\\n\\r\\n\\r\\n# Ranges []\\r\\n\\r\\nRange means that the expression can be one letter/number from a range. The dash `-` denotes a range from, to.\\r\\n\\r\\n- `[abc]` - means that the expression will be `a` or `b` or `c` (only one letter)\\r\\n- `[a-bB-Z]` - the expression can be `a`, `b`, `B`, `C`, `D`, \u2026, `Z`\\r\\n- `[a-Z]` - the expression can be any English character (uppercase or lowercase)\\r\\n- `[0-9]` - the expression can be any digit\\r\\n- `[a-Z\u0105\u0107\u0119\u0142\u0144\xf3\u015b\u017a\u017c\u0104\u0118\u0141\u0143\xd3\u015a\u0179\u017b]` - range of all Polish characters.\\r\\n\\r\\n# Groups ()\\r\\n\\r\\n- `(ab){2}` - means the expression `abab`\\r\\n\\r\\n#Flags\\r\\n\\r\\n- `(?i)` - ignore the case of letters to the right of this character\\r\\n\\r\\n# Special signs\\r\\n\\r\\n- `.` - any character\\r\\n- `$` - end of line (if we use this character at the end, it means that there is no character after the searched expression.\\r\\n- `^` - beginning of the line (if we use this character at the beginning, it means that there is no character before the searched expression.\\r\\n- `[^e]` - negation - the expression will not contain the letter `e`.\\r\\n- `|` - the sign means logical or, i.e. the expression will be any expression separated by the `|` sign\\r\\n\\r\\n  e.g. `a|b` - means `a` or `b`\\r\\n\\r\\n- `\\\\s` - Space, tab or newline\\r\\n- `\\\\S` - A character that is the negation of `\\\\s`, i.e. a character that is not a space, tab or newline character\\r\\n- `\\\\w` - letter, digit or character `_` (equivalent to `[a-Z_]`\\r\\n- `\\\\W` - a character that is the negation of `\\\\w`, i.e. a character that is not a letter, digit or `_`\\r\\n- `\\\\d` - digit (equivalent to `[0-9]`)\\r\\n- `\\\\D` - a character that is the negation of `\\\\d`, i.e. a character that is not a digit\\r\\n- `\\\\b` - Any whitespace character, the beginning of a string, the end of a string, and any character that is neither a letter nor a digit.\\r\\n\\r\\n**If we want to use one of the special characters in the regular expression such as `.`, `*`, `/`, `?`, `:`, `.`, `^`, `+`, `\\\\`, `=`, `|`, then we precede it with the `\\\\` character, e.g. `\\\\.`**"},{"id":"python-youtube-downloader","metadata":{"permalink":"/blog/python-youtube-downloader","source":"@site/blog/2024-05-16-youtube-downloader.md","title":"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle","description":"I recently stopped using Spotify Premium and it has become more difficult to listen to music and podcasts on the plane. So far, I have downloaded mp3 and mp4 using online tools such as:","date":"2024-05-16T00:00:00.000Z","formattedDate":"May 16, 2024","tags":[{"label":"python","permalink":"/blog/tags/python"},{"label":"scripts","permalink":"/blog/tags/scripts"},{"label":"tools","permalink":"/blog/tags/tools"}],"readingTime":3.42,"hasTruncateMarker":false,"authors":[{"name":"Bartek Jab\u0142o\u0144ski","title":"Backend Cloud Developer","url":"https://bartas93.github.io","imageURL":"/images/bartek_jablonski_2.png","key":"bjab"}],"frontMatter":{"slug":"python-youtube-downloader","title":"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle","authors":"bjab","tags":["python","scripts","tools"]},"prevItem":{"title":"Regular expressions","permalink":"/blog/regular-expressions"}},"content":"I recently stopped using Spotify Premium and it has become more difficult to listen to music and podcasts on the plane. So far, I have downloaded mp3 and mp4 using online tools such as:\\r\\n\\r\\n- https://notube.net/pl/youtube-app-v103\\r\\n- https://y2down.cc/pl/youtube-mp4.html and others\\r\\n\\r\\nUnfortunately, tools of this type allow you to download individual videos and bombard us with a lot of invasive advertisements. To avoid these problems, we will write a script in Python which, after providing a link to a playlist or movie, will download an mp3 or mp4.\\r\\n\\r\\nWe will use the library [pytube](https://pytube.io/en/latest/) to write the script .\\r\\n\\r\\nYou can find the entire script in the repository gitlab: https://gitlab.com/bart_as93/youtube-downloader\\r\\n\\r\\n### 1. Initial setup\\r\\n\\r\\nClone the repository to your local machine:\\r\\n\\r\\n```bash\\r\\ngit clone https://gitlab.com/bart_as93/youtube-downloader.git\\r\\ncd youtube-downloader\\r\\n```\\r\\n\\r\\nCheck python versions\\r\\n\\r\\n```bash\\r\\npython --version\\r\\n```\\r\\n\\r\\nIn my case `Python 3.11.4`\\r\\n\\r\\nThen we install the dependencies\\r\\n\\r\\n```bash\\r\\npip install -r requirements.txt\\r\\n```\\r\\n\\r\\nThen we run the script, e.g.:\\r\\n\\r\\n```bash\\r\\npython .\\\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music -f mp4\\r\\n```\\r\\n\\r\\nThe script takes 4 arguments:\\r\\n\\r\\n- `-f` - format one of: mp3 or mp4\\r\\n- `-d` - directory where to download files\\r\\n- and one of below:\\r\\n    - `-u` - Url to youtube video\\r\\n    - `-pu` - Url to playlist\\r\\n\\r\\n### YouTube to mp4\\r\\n\\r\\nTo download a YouTube video you need to use the `-u <link_to_video>` flag and `f mp4` flag\\r\\n\\r\\n```bash\\r\\npython .\\\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/watch?v=a59gmGkq_pw -d movies -f mp4\\r\\n```\\r\\n\\r\\n### YouTube to mp3\\r\\n\\r\\nTo download audio from YouTube video you need to use the `-u <link_to_video>` flag and `-f mp3` flag.\\r\\n\\r\\n```bash\\r\\npython .\\\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/watch?v=a59gmGkq_pw -d music -f mp3\\r\\n```\\r\\n\\r\\n### YouTube Playlist to mp4\\r\\n\\r\\nTo download videos from YouTube playlist you need to use `-pu <link_to_playlist>` flag and `-f mp4` flag.\\r\\n\\r\\n```bash\\r\\npython .\\\\[downloader.py](http://downloader.py/) -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music-f mp4\\r\\n```\\r\\n\\r\\n### YouTube Playlist to mp3\\r\\n\\r\\nTo download audio from YouTube playlist you need to use `-pu <link_to_playlist>` flag and `-f mp3` flag.\\r\\n\\r\\n```bash\\r\\npython .\\\\[downloader.py](http://downloader.py/) -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d movies -f mp3\\r\\n```\\r\\n\\r\\n## Code overview (comments in code):\\r\\n\\r\\n```python\\r\\nimport argparse\\r\\nimport os\\r\\nfrom pytube import Playlist\\r\\nfrom pytube import YouTube\\r\\n\\r\\n# The program supports two formats: mp3 and mp4. In the else section, if the format is different, the program is disabled\\r\\ndef downloadByVideo(vid):\\r\\n    print(\'downloading : {} - {} with url : {}\'.format(video.author, video.title, video.watch_url))\\r\\n    global type\\r\\n    vidFileName = vid.author + \\" - \\" + vid.title + \\".\\" + format\\r\\n    if format == \'mp3\':\\r\\n        type = \'audio\'\\r\\n# On the video object, we refer to streams, filter only audio and call the download method with options describing the target directory in which the file will be saved and the file name\\r\\n        vid.streams. \\\\\\r\\n            filter(only_audio=True).desc().first(). \\\\\\r\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\\r\\n    elif format == \'mp4\':\\r\\n        type = \'video\'\\r\\n# On the video object, we refer to streams, filter only the video, sort from the highest resolution and call the download method with options describing the target directory in which the file will be saved and the file name\\r\\n        vid.streams. \\\\\\r\\n            filter(type=type, progressive=True, file_extension=format). \\\\\\r\\n            order_by(\'resolution\'). \\\\\\r\\n            desc(). \\\\\\r\\n            first(). \\\\\\r\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\\r\\n    else:\\r\\n        print(f\\"Not supported format type: {format}\\")\\r\\n        exit()\\r\\n\\r\\n# Handling command line parameters and checking required fields\\r\\nparser = argparse.ArgumentParser()\\r\\n\\r\\nparser.add_argument(\\"-u\\", \\"--Url\\", help=\\"Youtube video url\\")\\r\\nparser.add_argument(\\"-pu\\", \\"--PlayListUrl\\", help=\\"Playlist url\\")\\r\\nparser.add_argument(\\"-f\\", \\"--Format\\", help=\\"Format of downloaded files - mp3 or mp4\\")\\r\\nparser.add_argument(\\"-d\\", \\"--Destination\\", help=\\"Destination folder of downloaded files\\")\\r\\n\\r\\nformat=\\"mp3\\"\\r\\n\\r\\nargs = parser.parse_args()\\r\\n\\r\\nif not args.Url and not args.PlayListUrl:\\r\\n    print(\\"Please provide youtube playlist url via -pu or --PlayListUrl argument param or Youtube video url via -u or --Url\\")\\r\\n    exit()\\r\\nif not args.Destination:\\r\\n    print(\\"Please provide destination folder name via -d or --Destination argument param\\")\\r\\n    exit()\\r\\nif not args.Format:\\r\\n    print(\\"Format (-f or --Format not provided - default set to mp3\\")\\r\\nelse:\\r\\n    format=args.Format\\r\\n\\r\\nDOWNLOAD_DIR = os.getcwd() + \\"\\\\\\\\out\\\\\\\\\\" + args.Destination\\r\\n\\r\\n# We check whether the URL to the Playlist (-pu) or the URL to the movie (-u) has been entered and the movie or playlist is downloaded based on the URL\\r\\nif(args.PlayListUrl):\\r\\n    playlist = Playlist(args.PlayListUrl)\\r\\n    print (f\\"Downloading {len(playlist.videos)} files from playlist with url: {args.Url}, with format: {args.Format}, to dir: {DOWNLOAD_DIR}\\")\\r\\n\\r\\n    for video in playlist.videos:\\r\\n        downloadByVideo(video)\\r\\n\\r\\nif (args.Url):\\r\\n    video = YouTube(args.Url)\\r\\n    downloadByVideo(video)\\r\\n```"}]}')}}]);