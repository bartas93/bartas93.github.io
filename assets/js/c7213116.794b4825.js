"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[619],{8860:(e,t,r)=>{r.d(t,{xA:()=>m,yg:()=>y});var a=r(7953);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},b="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),b=c(r),u=o,y=b["".concat(s,".").concat(u)]||b[u]||p[u]||n;return r?a.createElement(y,i(i({ref:t},m),{},{components:r})):a.createElement(y,i({ref:t},m))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[b]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<n;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=r(3911),o=(r(7953),r(8860));const n={slug:"jvm-memory-allocation-of-objects",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",authors:"bjab",tags:["jvm","jol","heap","memory","references"]},i=void 0,l={permalink:"/blog/jvm-memory-allocation-of-objects",source:"@site/blog/2024-05-16-jvm-memory-allocation-of-objects.md",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",description:"In short",date:"2024-05-16T00:00:00.000Z",formattedDate:"May 16, 2024",tags:[{label:"jvm",permalink:"/blog/tags/jvm"},{label:"jol",permalink:"/blog/tags/jol"},{label:"heap",permalink:"/blog/tags/heap"},{label:"memory",permalink:"/blog/tags/memory"},{label:"references",permalink:"/blog/tags/references"}],readingTime:14.41,hasTruncateMarker:!0,authors:[{name:"Bartek Jab\u0142o\u0144ski",title:"Backend Cloud Developer",url:"https://bartas93.github.io",imageURL:"/images/bartek_jablonski_2.png",key:"bjab"}],frontMatter:{slug:"jvm-memory-allocation-of-objects",title:"Checking memory alocation of Objects - JOL library (Java Object Layout)",authors:"bjab",tags:["jvm","jol","heap","memory","references"]},nextItem:{title:"Regular expressions",permalink:"/blog/regular-expressions"}},s={authorsImageUrls:[void 0]},c=[{value:"In short",id:"in-short",level:2}],m={toc:c},b="wrapper";function p(e){let{components:t,...r}=e;return(0,o.yg)(b,(0,a.A)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"in-short"},"In short"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Each object has memory overhead (from 12 to 16 bytes for metadata headers, references (4 bytes), memory for simple data type."),(0,o.yg)("li",{parentName:"ul"},"Processors (CPU) can be 32 bit (4 byte - supporting a maximum of 4 GB RAM) or 64 bit (8 byte). This means that the CPU downloads data from RAM in batches of 4 or 8 bytes at a time."),(0,o.yg)("li",{parentName:"ul"},"Padding - alignment to 8 bytes - i.e. objects occupy memory equal to a multiple of 8 bytes. This can be increased because it limits the use of the maximum heap to 32 GB."),(0,o.yg)("li",{parentName:"ul"},"The reference takes 4 bytes (32bit CPU or 64bit CPU with Compressed References (default)) or 8 bytes (64bit CPU).",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"Maximum heap for Compressed References = 32 GB - use of bit shift by 3 places due to the fact that the 8 byte always has three zeros on the right side. (8 byte because it is aligned to 8 byte padding). Therefore we can use 32 GB heap instead of 4 GB."),(0,o.yg)("li",{parentName:"ul"},"When we use a 64-bit CPU with Compressed References and increase the heap memory above 32 GB, we may have problems with the application and a significant increase in the heap occupied due to the change in reference memory from 4 bytes to 8 bytes for every object on our heap- e.g. a change from -Xmx31g to -Xmx33g may result in an increase in data seizure by 40% (depending on the data)")))))}p.isMDXComponent=!0}}]);