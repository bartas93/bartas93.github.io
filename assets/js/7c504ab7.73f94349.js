"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[1726],{33911:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var t=r(85893),o=r(11151);const i={sidebar_label:"Fiber",description:"React fiber."},s="React Fiber",c={id:"Web/React/fiber",title:"React Fiber",description:"React fiber.",source:"@site/docs/Web/React/00-fiber.md",sourceDirName:"Web/React",slug:"/Web/React/fiber",permalink:"/docs/Web/React/fiber",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/docs/Web/React/00-fiber.md",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1668135973,formattedLastUpdatedAt:"11 Nov 2022",sidebarPosition:0,frontMatter:{sidebar_label:"Fiber",description:"React fiber."},sidebar:"notesSidebar",previous:{title:"React",permalink:"/docs/Web/React/"},next:{title:"Hook",permalink:"/docs/Web/React/hook"}},l={},a=[{value:"Goal",id:"goal",level:2},{value:"Structure",id:"structure",level:2},{value:"<code>FiberRootNode</code>",id:"fiberrootnode",level:3},{value:"<code>FiberNode</code>",id:"fibernode",level:3},{value:"<code>WorkTag</code>",id:"worktag",level:3},{value:"<code>Flags</code>",id:"flags",level:3},{value:"Traverse Fiber Tree",id:"traverse-fiber-tree",level:2},{value:"References",id:"references",level:2}];function d(e){const n=Object.assign({h1:"h1",p:"p",strong:"strong",admonition:"admonition",em:"em",h2:"h2",ul:"ul",li:"li",h3:"h3",code:"code",pre:"pre",blockquote:"blockquote",a:"a"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"react-fiber",children:"React Fiber"}),"\n",(0,t.jsxs)(n.p,{children:["Fiber is a single ",(0,t.jsx)(n.strong,{children:"unit of work"})," in React. And a Fiber is ",(0,t.jsx)(n.strong,{children:"work"})," on a Component that needs to be done or was done."]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["What does ",(0,t.jsx)(n.strong,{children:"work"})," mean?"]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Ans"}),": When a function is invoked, a new ",(0,t.jsx)(n.strong,{children:"stack frame"})," is added to the call stack. The ",(0,t.jsx)(n.strong,{children:"stack frame"})," represents the ",(0,t.jsx)(n.strong,{children:"work"})," that is performed by that function."]})]}),"\n",(0,t.jsx)(n.h2,{id:"goal",children:"Goal"}),"\n",(0,t.jsx)(n.p,{children:"The goals of React Fiber include the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the ability to split rendering work into chunks and spread it out over multiple frames."}),"\n",(0,t.jsx)(n.li,{children:"the ability to pause, abort, or reuse work as new updates come in."}),"\n",(0,t.jsxs)(n.li,{children:["the ability to assign ",(0,t.jsx)(n.strong,{children:"priority"})," to different types of updates. (",(0,t.jsx)(n.strong,{children:"outdated?"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"new concurrency primitives."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(n.h3,{id:"fiberrootnode",children:(0,t.jsx)(n.code,{children:"FiberRootNode"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="react/packages/react-reconciler/src/ReactInternalTypes.js"',children:'export type FiberRoot = {\n  // The type of root (legacy, batched, concurrent, etc.)\n  tag: RootTag; // ConcurrentRoot(createRoot()) | LegacyRoot(render())\n\n  // Any additional information from the host associated with this root.\n  containerInfo: any; // <div id="root"></div>\n  // The currently active root fiber. This is the mutable root of the tree.\n  current: Fiber; // A fiber with tag HostRoot.\n\n  // A finished work-in-progress HostRoot that\'s ready to be committed.\n  finishedWork: Fiber | null;\n\n  // Node returned by Scheduler.scheduleCallback. Represents the next rendering\n  // task that the root will work on.\n  callbackNode: *;\n  callbackPriority: Lane;\n  eventTimes: LaneMap<number>;\n  expirationTimes: LaneMap<number>;\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"FiberRootNode"})," is created by ",(0,t.jsx)(n.code,{children:"ReactDOM.createRoot()"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const root = ReactDOM.createRoot(document.getElementById("container"));\n// fiberRootNode = root._internalRoot\nroot.render(<App />);\n// updateContainer(<App />, fiberRootNode) -> scheduleUpdateOnFiber(fiberRootNode, fiberRootNode.current)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fibernode",children:(0,t.jsx)(n.code,{children:"FiberNode"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="react/packages/react-reconciler/src/ReactFiber.new.js"',children:"function FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  // ConcurrentMode | BlockingMode(deprecated) | StrictLegacyMode | StrictEffectsMode\n  mode: TypeOfMode\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null; // Used in component wrapped by React.memo().\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber - Singly Linked List Tree Structure\n  this.return = null;\n  this.child = null; // Represents the element returned when we call render() on the component.\n\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null; // The state used to create the output\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags; // Placement\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  // Double Buffering\n  this.alternate = null;\n}\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["source code: ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/react/blob/9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e/packages/react-reconciler/src/ReactFiber.new.js#L118-L155",children:"react/packages/react-reconciler/src/ReactFiber.new.js"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"worktag",children:(0,t.jsx)(n.code,{children:"WorkTag"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="react/packages/react-reconciler/src/ReactWorkTags.js"',children:"export type WorkTag = 0 | 1 | 2 | 3 | 4 | ...;\n\nexport const FunctionComponent = 0; // <App /> <Button />\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. root.current\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5; // <main> <div> <span>\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["source code: ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/react/blob/v18.2.0/packages/react-reconciler/src/ReactWorkTags.js",children:"react/packages/react-reconciler/src/ReactWorkTags.js"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"flags",children:(0,t.jsx)(n.code,{children:"Flags"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="react/packages/react-reconciler/src/ReactFiberFlags.js"',children:"export type Flags = number;\n\nexport const NoFlags = /*            */ 0b00000000000000000000000000;\nexport const PerformedWork = /*      */ 0b00000000000000000000000001;\nexport const Placement = /*          */ 0b00000000000000000000000010;\nexport const Update = /*             */ 0b00000000000000000000000100;\nexport const ChildDeletion = /*      */ 0b00000000000000000000001000;\nexport const ContentReset = /*       */ 0b00000000000000000000010000;\nexport const Callback = /*           */ 0b00000000000000000000100000;\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\n\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["source code: ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/react/blob/v18.2.0/packages/react-reconciler/src/ReactFiberFlags.js",children:"react/packages/react-reconciler/src/ReactFiberFlags.js"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["During reconciliation, use ",(0,t.jsx)(n.code,{children:"reconcileChildren(current, workInProgress, nextChildren, renderLanes)"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes))"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes)"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["to determine if the fiber need to have ",(0,t.jsx)(n.code,{children:"Placement"})," | ",(0,t.jsx)(n.code,{children:"Update"})," etc. flags."]}),"\n",(0,t.jsxs)(n.p,{children:["During the commit phrase, use ",(0,t.jsx)(n.code,{children:"commitMutationEffects(root, finishedWork, lanes)"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"commitMutationEffectsOnFiber(finishedWork, root)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"recursivelyTraverseMutationEffects(root, finishedWork);"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"commitReconciliationEffects(finishedWork)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"to flush the changes to the DOM."}),"\n",(0,t.jsx)(n.h2,{id:"traverse-fiber-tree",children:"Traverse Fiber Tree"}),"\n",(0,t.jsx)(n.p,{children:"We only need to traverse the fiber tree during the render phrase."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://stackblitz.com/edit/js-ntqfil?file=index.js",children:"demo"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'type FiberNode = {\n  name: string;\n  child: FiberNode | null;\n  sibling: FiberNode | null;\n  return: FiberNode | null;\n};\nconst a1: FiberNode = { name: "a1", child: null, sibling: null, return: null };\nconst b1: FiberNode = { name: "b1", child: null, sibling: null, return: null };\nconst b2: FiberNode = { name: "b2", child: null, sibling: null, return: null };\nconst b3: FiberNode = { name: "b3", child: null, sibling: null, return: null };\nconst c1: FiberNode = { name: "c1", child: null, sibling: null, return: null };\nconst c2: FiberNode = { name: "c2", child: null, sibling: null, return: null };\nconst d1: FiberNode = { name: "d1", child: null, sibling: null, return: null };\nconst d2: FiberNode = { name: "d2", child: null, sibling: null, return: null };\n\na1.child = b1;\nb1.sibling = b2;\nb2.sibling = b3;\nb2.child = c1;\nb3.child = c2;\nc1.child = d1;\nd1.sibling = d2;\n\nb1.return = b2.return = b3.return = a1;\nc1.return = b2;\nd1.return = d2.return = c1;\nc2.return = b3;\n\nlet workInProgress: FiberNode | null = a1;\n\nfunction workLoopSync() {\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: FiberNode) {\n  console.log(`performUnitOfWork on fiber: ${unitOfWork.name}`);\n\n  const next = beginWork(unitOfWork); // return the child\n\n  if (next === null) {\n    // If this doesn\'t spawn new work, complete the current work.\n    // try to get to sibling\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n}\n\nfunction beginWork(unitOfWork: FiberNode): FiberNode | null {\n  console.log(`beginWork on fiber: ${unitOfWork.name}`);\n\n  return unitOfWork.child;\n}\n\n/**\n *  Attempt to complete the current unit of work, then move to the next\n    sibling. If there are no more siblings, return to the parent fiber.\n * @param unitOfWork work\n */\nfunction completeUnitOfWork(unitOfWork: FiberNode): void {\n  console.log(`completeUnitOfWork on fiber: ${unitOfWork.name}`);\n\n  let completedWork: FiberNode | null = unitOfWork;\n\n  do {\n    const returnFiber = completedWork.return;\n\n    completeWork(completedWork);\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      workInProgress = siblingFiber;\n      return;\n    }\n\n    completedWork = returnFiber;\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n}\n\nfunction completeWork(unitOfWork: FiberNode) {\n  console.log(`completeWork on fiber: ${unitOfWork.name}`);\n  return null;\n}\n\nworkLoopSync();\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="base"',children:"let root = fiber;\nlet node = fiber;\nwhile (true) {\n  // Do something with node\n  if (node.child) {\n    node = node.child;\n    continue;\n  }\n  if (node === root) {\n    return;\n  }\n  while (!node.sibling) {\n    if (!node.return || node.return === root) {\n      return;\n    }\n    node = node.return;\n  }\n  node = node.sibling;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/facebook/react/tree/v18.2.0",children:"Source Code of React v.18.2.0"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/#measuring-react-component-rendering-performance",children:"A (Mostly) Complete Guide to React Rendering Behavior"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/acdlite/react-fiber-architecture",children:"React Fiber Architecture"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://indepth.dev/posts/1501/exploring-how-virtual-dom-is-implemented-in-react",children:"Exploring how virtual DOM is implemented in React"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/facebook/react/issues/7942",children:"Fiber Principles: Contributing To Fiber #7942"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://blog.logrocket.com/deep-dive-react-fiber/#how-react-fiber-work",children:"A deep dive into React Fiber"})}),"\n"]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}},11151:(e,n,r)=>{r.d(n,{Zo:()=>c,ah:()=>i});var t=r(67294);const o=t.createContext({});function i(e){const n=t.useContext(o);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const s={};function c({components:e,children:n,disableParentContext:r}){let c;return c=r?"function"==typeof e?e({}):e||s:i(e),t.createElement(o.Provider,{value:c},n)}}}]);