"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[2248],{76832:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>u});var o=a(85893),n=a(11151);const i={title:"Perform In-Game Updates in Unity using HybridCLR and Addressables",authors:"xiaohai",description:"A solution that allows you to update both code and resources without requiring users to download a new version of the app",tags:["Unity","Game","Hot Update","Addressables"]},s=void 0,r={permalink:"/blog/2023/03/25/unity-hot-update",editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/blog/2023/03-25-unity-hot-update/index.md",source:"@site/blog/2023/03-25-unity-hot-update/index.md",title:"Perform In-Game Updates in Unity using HybridCLR and Addressables",description:"A solution that allows you to update both code and resources without requiring users to download a new version of the app",date:"2023-03-25T00:00:00.000Z",formattedDate:"25 March 2023",tags:[{label:"Unity",permalink:"/blog/tags/unity"},{label:"Game",permalink:"/blog/tags/game"},{label:"Hot Update",permalink:"/blog/tags/hot-update"},{label:"Addressables",permalink:"/blog/tags/addressables"}],readingTime:11.82,hasTruncateMarker:!0,authors:[{name:"Xiaohai Huang",title:"CS Student",url:"http://github.com/xiaohai-huang",imageURL:"https://github.com/xiaohai-huang.png",key:"xiaohai"}],frontMatter:{title:"Perform In-Game Updates in Unity using HybridCLR and Addressables",authors:"xiaohai",description:"A solution that allows you to update both code and resources without requiring users to download a new version of the app",tags:["Unity","Game","Hot Update","Addressables"]},unlisted:!1,prevItem:{title:"Taobao HangZhou Interview Round 1",permalink:"/blog/2024/02/28/taobao-interview-round-1"},nextItem:{title:"Serve Static Website Stored On Remote Server Using Nginx",permalink:"/blog/2023/03/18/serve-static-site-with-nginx"}},d={authorsImageUrls:[void 0]},u=[];function l(e){const t=Object.assign({p:"p",a:"a",strong:"strong"},(0,n.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Imagine you are playing your favorite game on your phone. You are enjoying the graphics, the gameplay, and the story. Suddenly, you encounter a bug that crashes the game. You check the app store for an update, but there is none. You are frustrated and disappointed."}),"\n",(0,o.jsx)(t.p,{children:"Now imagine you are developing a game with Unity. You want to deliver the best experience to your players, but you also want to save time and money. You don't want to recompile and resubmit your entire project every time you need to fix a bug or add a feature. You want to update your game without requiring users to download a new version of the app."}),"\n",(0,o.jsx)(t.p,{children:"How can you achieve this?"}),"\n",(0,o.jsx)(t.p,{children:"The answer is hot updating."}),"\n",(0,o.jsx)(t.p,{children:"Hot updating is a technique that allows you to update both code and resources of your game at runtime. This means that you can fix bugs, add features, and optimize performance without affecting the user experience."}),"\n",(0,o.jsx)(t.p,{children:"But how can you implement hot updating in Unity?"}),"\n",(0,o.jsxs)(t.p,{children:["In this blog post, I will introduce you a solution that can help you perform in-game updates in Unity with minimal effort and maximum flexibility. It is based on two open source projects: ",(0,o.jsx)(t.a,{href:"https://github.com/focus-creative-games/hybridclr",children:(0,o.jsx)(t.strong,{children:"HybridCLR"})})," and  ",(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",children:(0,o.jsx)(t.strong,{children:"Addressables"})}),"."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://github.com/focus-creative-games/hybridclr",children:(0,o.jsx)(t.strong,{children:"HybridCLR"})})," is a framework that allows you to write C# code that can be compiled into IL2CPP or Mono assemblies at runtime. This means that you can update your game logic without recompiling your entire project."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://docs.unity3d.com/Packages/com.unity.addressables@1.21/manual/index.html",children:(0,o.jsx)(t.strong,{children:"Addressables"})})," is a Unity package that provides an easy way to load assets by key from local or remote locations."]}),"\n",(0,o.jsx)(t.p,{children:"By combining these two tools, you can perform in-game updates in Unity with minimal effort and maximum flexibility."}),"\n",(0,o.jsx)(t.p,{children:"In this blog post, I will show you how to use HybridCLR and Addressables to perform in-game updates in Unity, and demonstrate how this solution can improve your game development workflow and user experience."})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}},11151:(e,t,a)=>{a.d(t,{Zo:()=>r,ah:()=>i});var o=a(67294);const n=o.createContext({});function i(e){const t=o.useContext(n);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const s={};function r({components:e,children:t,disableParentContext:a}){let r;return r=a?"function"==typeof e?e({}):e||s:i(e),o.createElement(n.Provider,{value:r},t)}}}]);