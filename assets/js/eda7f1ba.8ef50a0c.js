"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[8580],{47588:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var r=s(85893),i=s(11151);const l={sidebar_label:"\ud83e\udd1e Promise",description:"Notes about JavaScript promise."},o="\ud83e\udd1e Promise",t={id:"Web/JavaScript/promise",title:"\ud83e\udd1e Promise",description:"Notes about JavaScript promise.",source:"@site/docs/Web/JavaScript/07-promise.md",sourceDirName:"Web/JavaScript",slug:"/Web/JavaScript/promise",permalink:"/docs/Web/JavaScript/promise",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/docs/Web/JavaScript/07-promise.md",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1695964360,formattedLastUpdatedAt:"29 Sept 2023",sidebarPosition:7,frontMatter:{sidebar_label:"\ud83e\udd1e Promise",description:"Notes about JavaScript promise."},sidebar:"notesSidebar",previous:{title:"\u267b\ufe0f Event Loop",permalink:"/docs/Web/JavaScript/event-loop"},next:{title:"\ud83d\uddd1\ufe0f Memory Management",permalink:"/docs/Web/JavaScript/memory-management"}},c={},d=[{value:"Three States",id:"three-states",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>Promise.all()</code>",id:"all",level:3},{value:"Implementation",id:"implementation",level:4},{value:"<code>Promise.allSettled()</code>",id:"allSettled",level:3},{value:"<code>Promise.any()</code>",id:"any",level:3},{value:"Implementation",id:"implementation-1",level:4},{value:"<code>Promise.race()</code>",id:"race",level:3},{value:"Use Cases",id:"use-cases",level:4},{value:"Using <code>Promise.race()</code> to Implement Request Timeout",id:"using-promiserace-to-implement-request-timeout",level:5},{value:"Using <code>Promise.race()</code> to Detect the State of a Promise",id:"using-promiserace-to-detect-the-state-of-a-promise",level:5},{value:"<code>Promise.resolve()</code>",id:"resolve",level:3},{value:"Resolving Another Promise",id:"resolving-another-promise",level:4},{value:"Resolving Thenable",id:"resolving-thenable",level:4},{value:"<code>Promise.reject()</code>",id:"reject",level:3},{value:"Instance Methods",id:"instance-methods",level:2},{value:"<code>Promise.prototype.then()</code>",id:"then",level:3},{value:"Returned Promise",id:"returned-promise",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>Promise.prototype.catch()</code>",id:"catch",level:3},{value:"Examples",id:"examples-1",level:4},{value:"<code>Promise.prototype.finally()</code>",id:"finally",level:3},{value:"Examples",id:"examples-2",level:4},{value:"References",id:"references",level:2}];function h(e){const n=Object.assign({h1:"h1",p:"p",strong:"strong",em:"em",code:"code",h2:"h2",ul:"ul",li:"li",admonition:"admonition",a:"a",h3:"h3",h4:"h4",pre:"pre",blockquote:"blockquote",h5:"h5"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"-promise",children:"\ud83e\udd1e Promise"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.strong,{children:"Promise"})," is an object representing the eventual \u2705",(0,r.jsx)(n.em,{children:"completion"})," or \u274c",(0,r.jsx)(n.em,{children:"failure"})," of an asynchronous operation. It allows you to attach handlers (",(0,r.jsx)(n.code,{children:"onfulfilled"}),", ",(0,r.jsx)(n.code,{children:"onrejected"}),") via ",(0,r.jsx)(n.code,{children:".then()"})," to the object to deal with the eventual ",(0,r.jsx)(n.strong,{children:"success"})," value or ",(0,r.jsx)(n.strong,{children:"failure"})," reason."]}),"\n",(0,r.jsx)(n.h2,{id:"three-states",children:"Three States"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Promise"})," is in one of these 3 states:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u23f3\ufe0f ",(0,r.jsx)(n.em,{children:"pending"}),": initial state and it is neither fulfilled nor rejected."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.em,{children:"fulfilled"}),": meaning that the async operation was completed successfully."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.em,{children:"rejected"}),": meaning that the async operation failed."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A promise is said to be ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"settled"})})," if it is either \u2705fulfilled or \u274crejected, but not \u23f3\ufe0f",(0,r.jsx)(n.em,{children:"pending"})," (Being ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"settled"})})," is not a state, just a linguistic convenience)."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:'"resolved" promises are often equivalent to "fulfilled" promises.'})}),"\n",(0,r.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"new Promise(executor)"})}),"\n",(0,r.jsx)(n.h2,{id:"static-methods",children:"Static Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#resolve",children:(0,r.jsx)(n.code,{children:"Promise.resolve()"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#reject",children:(0,r.jsx)(n.code,{children:"Promise.reject()"})})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["There are 4 static methods that take an ",(0,r.jsx)(n.em,{children:"iterable"})," of ",(0,r.jsx)(n.strong,{children:"promises"})," and return a new promise."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#all",children:(0,r.jsx)(n.code,{children:"Promise.all()"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#allSettled",children:(0,r.jsx)(n.code,{children:"Promise.allSettled()"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#any",children:(0,r.jsx)(n.code,{children:"Promise.any()"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#race",children:(0,r.jsx)(n.code,{children:"Promise.race()"})})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"all",children:(0,r.jsx)(n.code,{children:"Promise.all()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.all()"})," method takes an iterable of promises as input and returns a single ",(0,r.jsx)(n.code,{children:"Promise"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"already"})," ",(0,r.jsx)(n.em,{children:"fulfills"}),", if the ",(0,r.jsx)(n.code,{children:"iterable"})," passed is empty."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"asynchronously"})," ",(0,r.jsx)(n.em,{children:"fulfills"})," when all of the input promises fulfill, with an array of fulfilled values, in the ",(0,r.jsx)(n.strong,{children:"order"})," of the promises passed, regardless of completion order."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"asynchronously"})," ",(0,r.jsx)(n.em,{children:"rejects"})," immediately when any of the input promises rejects, with this ",(0,r.jsx)(n.strong,{children:"first rejection reason"}),'. This is also known as "Fail-Fast".']}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Promise.all"})," resolves ",(0,r.jsx)(n.strong,{children:"synchronously"})," if and only if the ",(0,r.jsx)(n.code,{children:"iterable"})," passed is empty ",(0,r.jsx)(n.code,{children:"[]"}),". In other situations, the returned ",(0,r.jsx)(n.code,{children:"Promise"})," will be ",(0,r.jsx)(n.em,{children:"asynchronously"})," fulfilled or ",(0,r.jsx)(n.em,{children:"asynchronously"})," rejected."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)];\n\nconst p = Promise.all(resolvedPromisesArray);\n// Immediately logging the value of p\n// highlight-next-line\nconsole.log(p); //  Promise { <state>: "pending" }\n\n// Using setTimeout, we can execute code after the queue is empty\nsetTimeout(() => {\n  console.log("the queue is now empty");\n  // highlight-next-line\n  console.log(p); // Promise { <state>: "fulfilled", <value>: Array[2] }\n});\n'})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"function all(promises) {\n  // `Promise.all` resolves synchronously if and only if the iterable passed is empty\n  if (promises.length === 0) return Promise.resolve(promises);\n\n  // return a single `Promise`\n  return new Promise((resolve, reject) => {\n    // fulfill with an array of fulfilled values\n    const result = [];\n\n    promises.forEach((promise, i) => {\n      if (promise instanceof Promise) {\n        promise.then(\n          (value) => {\n            // the fulfilled value is in the order of the promises passed\n            result[i] = value;\n            // fulfill the promise when all the promises fulfill\n            if (result.length === promises.length) resolve(result);\n          },\n          (reason) => {\n            // reject immediately, when any of the promises rejects\n            reject(reason);\n          }\n        );\n      } else {\n        // if the iterable contains non-promise values,\n        // they will still be included in the returned promise array\n        // as if the promise is fulfilled\n        result[i] = promise;\n        if (result.length === promises.length) resolve(result);\n      }\n    });\n  });\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The implementation above does not satisfy the asynchronously fulfilled/rejected requirement."})}),"\n",(0,r.jsx)(n.h3,{id:"allSettled",children:(0,r.jsx)(n.code,{children:"Promise.allSettled()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.allSettled()"})," method takes an ",(0,r.jsx)(n.code,{children:"iterable"})," of promises as input and returns a single ",(0,r.jsx)(n.code,{children:"Promise"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"already"})," ",(0,r.jsx)(n.em,{children:"fulfills"}),", if the ",(0,r.jsx)(n.code,{children:"iterable"})," passed is empty."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"asynchronously"})," ",(0,r.jsx)(n.em,{children:"fulfills"})," when all of the input promises settle."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"WILL NOT REJECT"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This method is used:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"when you have multiple asynchronous tasks that are not dependent on each other to complete."}),"\n",(0,r.jsx)(n.li,{children:"Or you want to know the result of each promise."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const promises = [\n  Promise.resolve(2),\n  new Promise((resolve) => setTimeout(() => resolve(233))),\n  Promise.reject(new Error("The reason is that I want it to fail")),\n  "niu b",\n];\n\nPromise.allSettled(promises).then((values) => console.log(values));\n/*\n[\n    {\n        "status": "fulfilled",\n        "value": 2\n    },\n    {\n        "status": "fulfilled",\n        "value": 233\n    },\n    {\n        "status": "rejected",\n        "reason": new Error("The reason is that I want it to fail")\n    },\n    {\n        "status": "fulfilled",\n        "value": "niu b"\n    }\n]\n*/\n'})}),"\n",(0,r.jsx)(n.h3,{id:"any",children:(0,r.jsx)(n.code,{children:"Promise.any()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.any()"})," method takes an ",(0,r.jsx)(n.code,{children:"iterable"})," of promises as input and returns a single ",(0,r.jsx)(n.code,{children:"Promise"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u274c This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"synchronously"})," ",(0,r.jsx)(n.em,{children:"rejects"})," when the input array is empty ",(0,r.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"asynchronously"})," ",(0,r.jsx)(n.em,{children:"fulfills"})," when ",(0,r.jsx)(n.strong,{children:"ANY"})," of the input promises \u2705 fulfills."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c This returned ",(0,r.jsx)(n.code,{children:"Promise"})," ",(0,r.jsx)(n.strong,{children:"asynchronously"})," ",(0,r.jsx)(n.em,{children:"rejects"})," when ",(0,r.jsx)(n.strong,{children:"ALL"})," of the input promises \u274c reject, with an ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",children:(0,r.jsx)(n.code,{children:"AggregateError"})})," containing an array of rejection reasons in ",(0,r.jsx)(n.code,{children:"e.errors"})," field."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["This method is useful for returning the ",(0,r.jsx)(n.strong,{children:"FIRST"})," promise that fulfills. It ",(0,r.jsx)(n.strong,{children:"short-circuits"})," after a promise fulfills, so it does not wait for the other promises to complete once it finds one."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In short, ",(0,r.jsx)(n.code,{children:"Promise.any()"})," takes the first fulfilled ",(0,r.jsx)(n.code,{children:"Promise"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Unlike ",(0,r.jsx)(n.code,{children:"Promise.all()"})," and ",(0,r.jsx)(n.code,{children:"Promise.allSettled()"}),", which returns an array, ",(0,r.jsx)(n.code,{children:"Promise.any()"})," only return ",(0,r.jsx)(n.strong,{children:"one"})," fulfilled value (assuming at least one promise fulfills)."]})}),"\n",(0,r.jsx)(n.h4,{id:"implementation-1",children:"Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'function any(promises) {\n  if (promises.length === 0)\n    return Promise.reject(new AggregateError("Empty input."));\n  const errors = [];\n  return new Promise((resolve, reject) => {\n    promises.forEach((promise) => {\n      promise\n        .then((value) => {\n          resolve(value);\n        })\n        .catch((reason) => {\n          errors.push(reason);\n          if (errors.length === promises.length)\n            reject(new AggregateError(errors, "All promises were rejected"));\n        });\n    });\n  });\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"race",children:(0,r.jsx)(n.code,{children:"Promise.race()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.race()"})," method takes an ",(0,r.jsx)(n.code,{children:"iterable"})," of promises as input and returns a single ",(0,r.jsx)(n.code,{children:"Promise"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u23f3\ufe0f This returned ",(0,r.jsx)(n.code,{children:"Promise"})," remains pending \u267e\ufe0f forever if the ",(0,r.jsx)(n.code,{children:"iterable"})," passed is empty ",(0,r.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 This returned ",(0,r.jsx)(n.code,{children:"Promise"})," asynchronously ",(0,r.jsx)(n.em,{children:"fulfills"})," if the first promise to settle is fulfilled."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c This returned ",(0,r.jsx)(n.code,{children:"Promise"})," asynchronously ",(0,r.jsx)(n.em,{children:"rejects"})," if the first promise to settle is rejected."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The method is used when you want the first async task to complete, but do not care about its eventual state (i.e. it can either ",(0,r.jsx)(n.code,{children:"fulfilled"})," or ",(0,r.jsx)(n.code,{children:"rejected"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["In short, ",(0,r.jsx)(n.code,{children:"Promise.race()"})," takes the first settled ",(0,r.jsx)(n.code,{children:"Promise"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Unlike ",(0,r.jsx)(n.code,{children:"Promise.all()"})," and ",(0,r.jsx)(n.code,{children:"Promise.allSettled()"}),", which returns an array, ",(0,r.jsx)(n.code,{children:"Promise.race()"})," only return ",(0,r.jsx)(n.strong,{children:"one"})," fulfilled value (assuming the first promise to settle is fulfilled)."]})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Promise.race()"})," is always asynchronous: it never settles synchronously, even when the input is empty ",(0,r.jsx)(n.code,{children:"[]"}),"."]})}),"\n",(0,r.jsx)(n.h4,{id:"use-cases",children:"Use Cases"}),"\n",(0,r.jsxs)(n.h5,{id:"using-promiserace-to-implement-request-timeout",children:["Using ",(0,r.jsx)(n.code,{children:"Promise.race()"})," to Implement Request Timeout"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const data = Promise.race([\n  fetch("/api"),\n  new Promise((_, reject) =>\n    setTimeout(() => reject(new Error("Request timed out")), 5000)\n  ),\n])\n  .then((res) => res.json())\n  .catch((err) => console.log(err));\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the ",(0,r.jsx)(n.code,{children:"data"})," promise fulfills, it will contain the data fetched from ",(0,r.jsx)(n.code,{children:"/api"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, it will reject if the ",(0,r.jsx)(n.code,{children:"fetch"})," operation takes more than 5 seconds because it loses the ",(0,r.jsx)(n.strong,{children:"race"})," with the ",(0,r.jsx)(n.code,{children:"setTimeout"})," timer."]}),"\n"]}),"\n",(0,r.jsxs)(n.h5,{id:"using-promiserace-to-detect-the-state-of-a-promise",children:["Using ",(0,r.jsx)(n.code,{children:"Promise.race()"})," to Detect the State of a Promise"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'function getPromiseState(promise) {\n  const obj = {};\n  return Promise.race([promise, obj])\n    .then((value) => (value === obj ? "pending" : "fulfilled"))\n    .catch(() => {\n      return "rejected";\n    });\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["adapted from ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race#using_promise.race_to_detect_the_status_of_a_promise",children:"MDN docs"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the ",(0,r.jsx)(n.code,{children:"promise"})," is pending, the second value, ",(0,r.jsx)(n.code,{children:"obj"}),", which is a non-promise, becomes the result of the ",(0,r.jsx)(n.strong,{children:"race"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the ",(0,r.jsx)(n.code,{children:"promise"})," is already fulfilled, the ",(0,r.jsx)(n.code,{children:"value"})," becomes the fulfilled value of the ",(0,r.jsx)(n.code,{children:"promise"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the ",(0,r.jsx)(n.code,{children:"promise"})," is already rejected, the ",(0,r.jsx)(n.code,{children:"onrejected"})," callback will be invoked."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getPromiseState"})," function still runs asynchronously, because there is no way to get a promise's value without ",(0,r.jsx)(n.code,{children:".then"})," or ",(0,r.jsx)(n.code,{children:"await"}),", even when it is already settled."]})}),"\n",(0,r.jsx)(n.h3,{id:"resolve",children:(0,r.jsx)(n.code,{children:"Promise.resolve()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.resolve()"})," method can take three types of input."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the input is a ",(0,r.jsx)(n.code,{children:"Promise"}),", that promise is returned."]}),"\n",(0,r.jsxs)(n.li,{children:["If the input is a ",(0,r.jsx)(n.code,{children:"thenable"}),", ",(0,r.jsx)(n.code,{children:"Promise.resolve()"})," will call the ",(0,r.jsx)(n.code,{children:"then()"})," method with two callbacks it prepared."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, returns a ",(0,r.jsx)(n.code,{children:"Promise"})," fulfilled with the input. (i.e. ",(0,r.jsx)(n.code,{children:"Promise.resolve(5)"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"resolving-another-promise",children:"Resolving Another Promise"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const originalPromise = Promise.resolve(233);\nconst newPromise = Promise.resolve(originalPromise);\n\nnewPromise.then((v) => console.log(v)); // 233\nconsole.log(originalPromise === newPromise); // true\n"})}),"\n",(0,r.jsx)(n.h4,{id:"resolving-thenable",children:"Resolving Thenable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const obj = {\n  then(onfulfilled, onrejected) {\n    console.log("inside then method");\n    onfulfilled("6666");\n  },\n};\n\nconst p = Promise.resolve(obj); // cast thenable to promise\nconsole.log(p); // p is an instance of Promise\np.then((v) => console.log(v));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"reject",children:(0,r.jsx)(n.code,{children:"Promise.reject()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Promise.reject()"})," method returns a ",(0,r.jsx)(n.code,{children:"Promise"})," object that is rejected with a given reason."]}),"\n",(0,r.jsxs)(n.p,{children:["It is useful to make ",(0,r.jsx)(n.code,{children:"reason"})," an instance of ",(0,r.jsx)(n.code,{children:"Error"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,r.jsx)(n.h3,{id:"then",children:(0,r.jsx)(n.code,{children:"Promise.prototype.then()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".then()"})," method returns a ",(0,r.jsx)(n.code,{children:"Promise"})," immediately, which allows for method chaining. It accepts two optional arguments which will be executed to handle the current promises' fulfillment or rejection."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"onFulfilled"})}),"\n",(0,r.jsx)(n.p,{children:"A Function asynchronously called if the current promise is fulfilled. This function has one argument, the fulfilled value."}),"\n",(0,r.jsxs)(n.p,{children:["If it is ",(0,r.jsx)(n.strong,{children:"not"})," a function, it is internally replaced with an ",(0,r.jsx)(n.em,{children:"identity"})," function ",(0,r.jsx)(n.code,{children:"x => x"})," which simply passes the fulfilled value forward."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"onRejected"})}),"\n",(0,r.jsx)(n.p,{children:"A Function asynchronously called if the current promise is rejected. This function has one argument, the rejection reason."}),"\n",(0,r.jsxs)(n.p,{children:["If it is ",(0,r.jsx)(n.strong,{children:"not"})," a function, it is internally replaced with a ",(0,r.jsx)(n.em,{children:"thrower"})," function ",(0,r.jsx)(n.code,{children:"x => {throw x;}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returned-promise",children:"Returned Promise"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".then()"})," method returns a ",(0,r.jsx)(n.code,{children:"Promise"})," immediately. This new promise is always \u23f3\ufe0f pending when returned, regardless of the current promise's state."]}),"\n",(0,r.jsxs)(n.p,{children:["The behavior of the returned promise (call it ",(0,r.jsx)(n.code,{children:"p"}),") depends on the handler's (",(0,r.jsx)(n.code,{children:"onFulfilled"}),", ",(0,r.jsx)(n.code,{children:"onRejected"}),") execution result, following a specific set of rules."]}),"\n",(0,r.jsx)(n.p,{children:"If the handler function:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 returns a value: ",(0,r.jsx)(n.code,{children:"p"})," gets ",(0,r.jsx)(n.strong,{children:"fulfilled"})," with the returned value as its value, ",(0,r.jsx)(n.code,{children:"[[PromiseResult]] === value"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 does not return anything: ",(0,r.jsx)(n.code,{children:"p"})," get ",(0,r.jsx)(n.strong,{children:"fulfilled"})," with ",(0,r.jsx)(n.code,{children:"undefined"}),", ",(0,r.jsx)(n.code,{children:"[[PromiseResult]] === undefined"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c throws an ",(0,r.jsx)(n.strong,{children:"error"}),": ",(0,r.jsx)(n.code,{children:"p"})," get ",(0,r.jsx)(n.strong,{children:"rejected"})," with the thrown error, ",(0,r.jsx)(n.code,{children:"[[PromiseResult]] === Error"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["returns an ",(0,r.jsx)(n.strong,{children:"already settled"})," promise: ",(0,r.jsx)(n.code,{children:"p"})," gets ",(0,r.jsx)(n.strong,{children:"settled"})," with that promise's result as its ",(0,r.jsx)(n.code,{children:"[[PromiseResult]]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["\u23f3\ufe0f returns another ",(0,r.jsx)(n.strong,{children:"pending"})," promise: ",(0,r.jsx)(n.code,{children:"p"})," will be fulfilled/rejected based on the eventual state of that promise."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the return value of ",(0,r.jsx)(n.code,{children:"onRejected"})," fulfills the ",(0,r.jsx)(n.code,{children:"p"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// the first rule, the handler returns a value\n// `p` gets fulfilled with the returned value\nconst p = Promise.reject("no reason!").then(\n  () => "will not be invoked",\n  () => "invoke the onRejected handler"\n);\np.then((value) => console.log("value is " + value));\n// logs: value is invoke the onRejected handler\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const p = Promise.reject("no reason!")\n  .then(() => "will not be invoked")\n  .catch(() => "invoke the onRejected handler");\np.then((value) => console.log("value is " + value));\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, the handler functions are non-function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// .then(x => x)\nPromise.resolve("resolved value").then(2333).then(console.log); // "resolved value"\n// .then(x => x, x => {throw x})\nPromise.reject("a reason").then(666, "a ha~").then(console.log, console.log); // a reason\n'})}),"\n",(0,r.jsx)(n.h3,{id:"catch",children:(0,r.jsx)(n.code,{children:"Promise.prototype.catch()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".catch()"})," methods returns a ",(0,r.jsx)(n.code,{children:"Promise"})," immediately and will be invoked if the current promise is rejected. It behaves the same as calling ",(0,r.jsx)(n.code,{children:"Promise.prototype.then(undefined, onRejected)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Calling ",(0,r.jsx)(n.code,{children:"obj.catch(onRejected)"})," internally calls ",(0,r.jsx)(n.code,{children:"obj.then(undefined, onRejected)."})]}),"\n",(0,r.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["Errors thrown inside ",(0,r.jsx)(n.code,{children:"setTimeout"})," cannot be caught by ",(0,r.jsx)(n.code,{children:".catch"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const p = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    throw new Error("an Error that cannot be caught by .catch");\n  }, 1000);\n});\np.catch((e) => console.log(e));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To solve this, you should call ",(0,r.jsx)(n.code,{children:"reject()"})," inside the ",(0,r.jsx)(n.code,{children:"setTimeout"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const p = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject(new Error("I am a reason!!!"));\n  }, 1000);\n});\n\np.catch((e) => {\n  console.error(e);\n});\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Errors thrown after calling ",(0,r.jsx)(n.code,{children:"resolve()"})," will be silenced."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const p3 = new Promise((resolve, reject) => {\n  resolve();\n  throw new Error("Silenced Exception!");\n});\n\np3.catch((e) => {\n  console.error(e); // This is never called\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"finally",children:(0,r.jsx)(n.code,{children:"Promise.prototype.finally()"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".finally()"})," method returns a ",(0,r.jsx)(n.code,{children:"Promise"})," immediately."]}),"\n",(0,r.jsxs)(n.p,{children:["The main use case is to avoid repeated code in both the promise's ",(0,r.jsx)(n.a,{href:"#then",children:(0,r.jsx)(n.code,{children:".then()"})})," and ",(0,r.jsx)(n.a,{href:"#catch",children:(0,r.jsx)(n.code,{children:".catch()"})})," handlers. It is useful if you want to do some processing or cleanup once the promise is settled, regardless of its outcome."]}),"\n",(0,r.jsxs)(n.p,{children:["The behavior of the returned promise (call it ",(0,r.jsx)(n.code,{children:"p"}),") depends on the ",(0,r.jsx)(n.strong,{children:"handler function"}),", following 2 rules:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u274c If the handler throws an error or returns a rejected promise, ",(0,r.jsx)(n.code,{children:"p"})," will be rejected with that value."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, the return value of the handler ",(0,r.jsx)(n.strong,{children:"DOES NOT AFFECT"})," the state of the original promise."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// rule 1\nPromise.reject(46).finally(() => {\n  throw "good reason";\n}); // good reason\n// rule 1\nPromise.reject(46).finally(() => Promise.reject("nice reason")); // nice reason\n\n// rule 2\nPromise.resolve("yes").finally(() => 77); // "yes"\n// rule 2 - the current promise is rejected\nPromise.reject("a reason").finally(() => 233); // "a reason"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",children:"Promise | MDN"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises",children:"Using Promises | MDN"})}),"\n"]})]})}const a=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(h,e)})):h(e)}},11151:(e,n,s)=>{s.d(n,{Zo:()=>t,ah:()=>l});var r=s(67294);const i=r.createContext({});function l(e){const n=r.useContext(i);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function t({components:e,children:n,disableParentContext:s}){let t;return t=s?"function"==typeof e?e({}):e||o:l(e),r.createElement(i.Provider,{value:t},n)}}}]);