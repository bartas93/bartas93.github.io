"use strict";(self.webpackChunkbj_blog=self.webpackChunkbj_blog||[]).push([[8062],{8860:(e,t,o)=>{o.d(t,{xA:()=>u,yg:()=>g});var n=o(7953);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(o),y=a,g=d["".concat(p,".").concat(y)]||d[y]||m[y]||l;return o?n.createElement(g,r(r({ref:t},u),{},{components:o})):n.createElement(g,r({ref:t},u))}));function g(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=o.length,r=new Array(l);r[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,r[1]=i;for(var s=2;s<l;s++)r[s]=o[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}y.displayName="MDXCreateElement"},8989:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=o(3911),a=(o(7953),o(8860));const l={slug:"python-youtube-downloader",title:"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle",authors:"bjab",tags:["python","scripts","tools"]},r="Youtube to mp4 and Youtube to mp3 via python script",i={permalink:"/blog/python-youtube-downloader",source:"@site/blog/2024-05-16-youtube-downloader.md",title:"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle",description:"I recently stopped using Spotify Premium and it has become more difficult to listen to music and podcasts on the plane. So far, I have downloaded mp3 and mp4 using online tools such as:",date:"2024-05-16T00:00:00.000Z",formattedDate:"May 16, 2024",tags:[{label:"python",permalink:"/blog/tags/python"},{label:"scripts",permalink:"/blog/tags/scripts"},{label:"tools",permalink:"/blog/tags/tools"}],readingTime:3.435,hasTruncateMarker:!0,authors:[{name:"Bartek Jab\u0142o\u0144ski",title:"Backend Cloud Developer",url:"https://bartas93.github.io",imageURL:"/images/bartek_jablonski_2.png",key:"bjab"}],frontMatter:{slug:"python-youtube-downloader",title:"Free YouTube Playlist Downloader to mp3 or mp4 - No Ads, No Hassle",authors:"bjab",tags:["python","scripts","tools"]},prevItem:{title:"Calculating the memory usage by a String in JVM - JOL Footprint",permalink:"/blog/string-in-jvm-memory"}},p={authorsImageUrls:[void 0]},s=[{value:"1. Initial setup",id:"1-initial-setup",level:3},{value:"YouTube to mp4",id:"youtube-to-mp4",level:3},{value:"YouTube to mp3",id:"youtube-to-mp3",level:3},{value:"YouTube Playlist to mp4",id:"youtube-playlist-to-mp4",level:3},{value:"YouTube Playlist to mp3",id:"youtube-playlist-to-mp3",level:3},{value:"Code overview (comments in code):",id:"code-overview-comments-in-code",level:2}],u={toc:s},d="wrapper";function m(e){let{components:t,...o}=e;return(0,a.yg)(d,(0,n.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"I recently stopped using Spotify Premium and it has become more difficult to listen to music and podcasts on the plane. So far, I have downloaded mp3 and mp4 using online tools such as:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://notube.net/pl/youtube-app-v103"},"https://notube.net/pl/youtube-app-v103")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"https://y2down.cc/pl/youtube-mp4.html"},"https://y2down.cc/pl/youtube-mp4.html")," and others")),(0,a.yg)("p",null,"Unfortunately, tools of this type allow you to download individual videos and bombard us with a lot of invasive advertisements. To avoid these problems, we will write a script in Python which, after providing a link to a playlist or movie, will download an mp3 or mp4."),(0,a.yg)("p",null,"We will use the library ",(0,a.yg)("a",{parentName:"p",href:"https://pytube.io/en/latest/"},"pytube")," to write the script ."),(0,a.yg)("p",null,"You can find the entire script in the repository gitlab: ",(0,a.yg)("a",{parentName:"p",href:"https://gitlab.com/bart_as93/youtube-downloader"},"https://gitlab.com/bart_as93/youtube-downloader")),(0,a.yg)("h3",{id:"1-initial-setup"},"1. Initial setup"),(0,a.yg)("p",null,"Clone the repository to your local machine:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"git clone https://gitlab.com/bart_as93/youtube-downloader.git\ncd youtube-downloader\n")),(0,a.yg)("p",null,"Check python versions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python --version\n")),(0,a.yg)("p",null,"In my case ",(0,a.yg)("inlineCode",{parentName:"p"},"Python 3.11.4")),(0,a.yg)("p",null,"Then we install the dependencies"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.txt\n")),(0,a.yg)("p",null,"Then we run the script, e.g.:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music -f mp4\n")),(0,a.yg)("p",null,"The script takes 4 arguments:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-f")," - format one of: mp3 or mp4"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-d")," - directory where to download files"),(0,a.yg)("li",{parentName:"ul"},"and one of below:",(0,a.yg)("ul",{parentName:"li"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-u")," - Url to youtube video"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"-pu")," - Url to playlist")))),(0,a.yg)("h3",{id:"youtube-to-mp4"},"YouTube to mp4"),(0,a.yg)("p",null,"To download a YouTube video you need to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"-u <link_to_video>")," flag and ",(0,a.yg)("inlineCode",{parentName:"p"},"f mp4")," flag"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/watch?v=a59gmGkq_pw -d movies -f mp4\n")),(0,a.yg)("h3",{id:"youtube-to-mp3"},"YouTube to mp3"),(0,a.yg)("p",null,"To download audio from YouTube video you need to use the ",(0,a.yg)("inlineCode",{parentName:"p"},"-u <link_to_video>")," flag and ",(0,a.yg)("inlineCode",{parentName:"p"},"-f mp3")," flag."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\[downloader.py](http://downloader.py/) -u https://www.youtube.com/watch?v=a59gmGkq_pw -d music -f mp3\n")),(0,a.yg)("h3",{id:"youtube-playlist-to-mp4"},"YouTube Playlist to mp4"),(0,a.yg)("p",null,"To download videos from YouTube playlist you need to use ",(0,a.yg)("inlineCode",{parentName:"p"},"-pu <link_to_playlist>")," flag and ",(0,a.yg)("inlineCode",{parentName:"p"},"-f mp4")," flag."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\[downloader.py](http://downloader.py/) -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d music-f mp4\n")),(0,a.yg)("h3",{id:"youtube-playlist-to-mp3"},"YouTube Playlist to mp3"),(0,a.yg)("p",null,"To download audio from YouTube playlist you need to use ",(0,a.yg)("inlineCode",{parentName:"p"},"-pu <link_to_playlist>")," flag and ",(0,a.yg)("inlineCode",{parentName:"p"},"-f mp3")," flag."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"python .\\[downloader.py](http://downloader.py/) -pu https://www.youtube.com/playlist?list=PLRomwVsNGznFggOY71VFRH_Wi8IOXj3hb -d movies -f mp3\n")),(0,a.yg)("h2",{id:"code-overview-comments-in-code"},"Code overview (comments in code):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'import argparse\nimport os\nfrom pytube import Playlist\nfrom pytube import YouTube\n\n# The program supports two formats: mp3 and mp4. In the else section, if the format is different, the program is disabled\ndef downloadByVideo(vid):\n    print(\'downloading : {} - {} with url : {}\'.format(video.author, video.title, video.watch_url))\n    global type\n    vidFileName = vid.author + " - " + vid.title + "." + format\n    if format == \'mp3\':\n        type = \'audio\'\n# On the video object, we refer to streams, filter only audio and call the download method with options describing the target directory in which the file will be saved and the file name\n        vid.streams. \\\n            filter(only_audio=True).desc().first(). \\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\n    elif format == \'mp4\':\n        type = \'video\'\n# On the video object, we refer to streams, filter only the video, sort from the highest resolution and call the download method with options describing the target directory in which the file will be saved and the file name\n        vid.streams. \\\n            filter(type=type, progressive=True, file_extension=format). \\\n            order_by(\'resolution\'). \\\n            desc(). \\\n            first(). \\\n            download(output_path=DOWNLOAD_DIR, filename=vidFileName)\n    else:\n        print(f"Not supported format type: {format}")\n        exit()\n\n# Handling command line parameters and checking required fields\nparser = argparse.ArgumentParser()\n\nparser.add_argument("-u", "--Url", help="Youtube video url")\nparser.add_argument("-pu", "--PlayListUrl", help="Playlist url")\nparser.add_argument("-f", "--Format", help="Format of downloaded files - mp3 or mp4")\nparser.add_argument("-d", "--Destination", help="Destination folder of downloaded files")\n\nformat="mp3"\n\nargs = parser.parse_args()\n\nif not args.Url and not args.PlayListUrl:\n    print("Please provide youtube playlist url via -pu or --PlayListUrl argument param or Youtube video url via -u or --Url")\n    exit()\nif not args.Destination:\n    print("Please provide destination folder name via -d or --Destination argument param")\n    exit()\nif not args.Format:\n    print("Format (-f or --Format not provided - default set to mp3")\nelse:\n    format=args.Format\n\nDOWNLOAD_DIR = os.getcwd() + "\\\\out\\\\" + args.Destination\n\n# We check whether the URL to the Playlist (-pu) or the URL to the movie (-u) has been entered and the movie or playlist is downloaded based on the URL\nif(args.PlayListUrl):\n    playlist = Playlist(args.PlayListUrl)\n    print (f"Downloading {len(playlist.videos)} files from playlist with url: {args.Url}, with format: {args.Format}, to dir: {DOWNLOAD_DIR}")\n\n    for video in playlist.videos:\n        downloadByVideo(video)\n\nif (args.Url):\n    video = YouTube(args.Url)\n    downloadByVideo(video)\n')))}m.isMDXComponent=!0}}]);