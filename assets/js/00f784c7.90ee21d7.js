"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[6931],{18781:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var t=i(85893),o=i(11151);const s={sidebar_label:"Position-Based Index",description:"Add position information to the index."},r="Position-Based Index",d={id:"cab432-search-engine-technology/inverted-indexs/position-based-index",title:"Position-Based Index",description:"Add position information to the index.",source:"@site/university/cab432-search-engine-technology/054-inverted-indexs/2-position-based-index.md",sourceDirName:"cab432-search-engine-technology/054-inverted-indexs",slug:"/cab432-search-engine-technology/inverted-indexs/position-based-index",permalink:"/university/cab432-search-engine-technology/inverted-indexs/position-based-index",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/university/cab432-search-engine-technology/054-inverted-indexs/2-position-based-index.md",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1670204287,formattedLastUpdatedAt:"05 Dec 2022",sidebarPosition:2,frontMatter:{sidebar_label:"Position-Based Index",description:"Add position information to the index."},sidebar:"university",previous:{title:"Count-Based Index",permalink:"/university/cab432-search-engine-technology/inverted-indexs/count-based-index"},next:{title:"Fields and Extents",permalink:"/university/cab432-search-engine-technology/inverted-indexs/fields-and-extents"}},a={},c=[{value:"Motivation",id:"motivation",level:2},{value:"Different Postings",id:"different-postings",level:2},{value:"Intersection",id:"intersection",level:2}];function h(e){const n=Object.assign({h1:"h1",p:"p",img:"img",h2:"h2",admonition:"admonition",strong:"strong",ul:"ul",li:"li",code:"code",blockquote:"blockquote"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"position-based-index",children:"Position-Based Index"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Position-Based Index Example",src:i(67958).Z+"",width:"1167",height:"1040"})}),"\n",(0,t.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsx)(n.p,{children:'When looking for matches for a query like "tropical fish", the location of the words in the document is an information predictor of relevance.'}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["Imagine a doc about food that included a section on ",(0,t.jsx)(n.strong,{children:"tropical fruits"})," followed by a section on ",(0,t.jsx)(n.strong,{children:"saltwater fish"}),"."]}),(0,t.jsxs)(n.p,{children:["So far, none of the indexes we have considered contain enough information to tell us that this document is not relevant. We want to know if the document contains the ",(0,t.jsx)(n.strong,{children:"exact phrase"}),' "tropical fish".']})]}),"\n",(0,t.jsx)(n.h2,{id:"different-postings",children:"Different Postings"}),"\n",(0,t.jsx)(n.p,{children:"To overcome the problem, we can add position information to the index."}),"\n",(0,t.jsxs)(n.p,{children:["Each posting contains two numbers: a document ID, followed by a word position. Unlike previous indexes, now there is ",(0,t.jsx)(n.strong,{children:"one posting"})," per word occurrence."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Align posting lists",src:i(917).Z+"",width:"1143",height:"202"})}),"\n",(0,t.jsx)(n.p,{children:'Look at the inverted list for the term "fish". It contains 9 postings.'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'{"1":2}'})," and ",(0,t.jsx)(n.code,{children:'{"1":4}'}),' mean that the term "fish" is the second and fourth word in document 1.']}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"intersection",children:"Intersection"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Align posting lists",src:i(917).Z+"",width:"1143",height:"202"})}),"\n",(0,t.jsx)(n.p,{children:"Look at the graph above, we can see that two inverted lists are lined up next to each other."}),"\n",(0,t.jsx)(n.p,{children:'In all, there are four occurrences of the phrase "tropical fish" in the four documents (twice in document 2).'}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:['This technique can be extended to find longer phrases or more general proximity expressions, such as "find ',(0,t.jsx)(n.strong,{children:"tropical"})," within 5 words of ",(0,t.jsx)(n.strong,{children:"fish"}),'"']}),(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Suppose that\nthe word \u201ctropical\u201d appears at position p. We can then look in the inverted list\nfor \u201cfish\u201d for any occurrences between position p \u2212 5 and p + 5. Any of those occurrences would constitute a match."}),"\n"]})]})]})}const l=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(h,e)})):h(e)}},917:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/position-based-index-align-postings-df66487a06bf4569ccf5c7cdc0c0de3e.png"},67958:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/position-based-index-example-c52295fb3d9e478ba7da8f507056af7f.png"},11151:(e,n,i)=>{i.d(n,{Zo:()=>d,ah:()=>s});var t=i(67294);const o=t.createContext({});function s(e){const n=t.useContext(o);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function d({components:e,children:n,disableParentContext:i}){let d;return d=i?"function"==typeof e?e({}):e||r:s(e),t.createElement(o.Provider,{value:d},n)}}}]);