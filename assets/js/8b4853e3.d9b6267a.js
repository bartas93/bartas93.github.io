"use strict";(self.webpackChunklearning_notes=self.webpackChunklearning_notes||[]).push([[9655],{95104:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=i(85893),o=i(11151);const s={sidebar_label:"Evolutionary Computing"},r="Intro to Evolutionary Computing",l={id:"cab320-artificial-intelligence/evolutionary-computing",title:"Intro to Evolutionary Computing",description:"Main EA(evolutionary algorithm) components",source:"@site/university/cab320-artificial-intelligence/120-evolutionary-computing.md",sourceDirName:"cab320-artificial-intelligence",slug:"/cab320-artificial-intelligence/evolutionary-computing",permalink:"/university/cab320-artificial-intelligence/evolutionary-computing",draft:!1,unlisted:!1,editUrl:"https://github.com/xiaohai-huang/learning-notes/tree/master/university/cab320-artificial-intelligence/120-evolutionary-computing.md",tags:[],version:"current",lastUpdatedBy:"xiaohai-huang",lastUpdatedAt:1695964360,formattedLastUpdatedAt:"29 Sept 2023",sidebarPosition:120,frontMatter:{sidebar_label:"Evolutionary Computing"},sidebar:"university",previous:{title:"Bellman Equation",permalink:"/university/cab320-artificial-intelligence/bellman-equation"},next:{title:"Machine Learning",permalink:"/university/cab420-machine-learning/"}},a={},c=[{value:"Two Pillars of Evolution",id:"two-pillars-of-evolution",level:2},{value:"Representation",id:"representation",level:2},{value:"Fitness Function",id:"fitness-function",level:2},{value:"Population",id:"population",level:2},{value:"Selection Mechanism",id:"selection-mechanism",level:2},{value:"Variation Operators",id:"variation-operators",level:2},{value:"Mutation",id:"mutation",level:3},{value:"Crossover",id:"crossover",level:3},{value:"Crossover OR Mutation",id:"crossover-or-mutation",level:3},{value:"Recombination",id:"recombination",level:3},{value:"Initialization / Termination",id:"initialization--termination",level:2}];function d(e){const n=Object.assign({h1:"h1",p:"p",img:"img",h2:"h2",strong:"strong",ul:"ul",li:"li",hr:"hr",admonition:"admonition",em:"em",a:"a",h3:"h3",ol:"ol"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"intro-to-evolutionary-computing",children:"Intro to Evolutionary Computing"}),"\n",(0,t.jsx)(n.p,{children:"Main EA(evolutionary algorithm) components"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Scheme of EAs",src:i(47336).Z+"",width:"1012",height:"663"})}),"\n",(0,t.jsx)(n.h2,{id:"two-pillars-of-evolution",children:"Two Pillars of Evolution"}),"\n",(0,t.jsx)(n.p,{children:"There are two competing forces"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Increasing"})," population diversity by genetic operators"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"mutation"}),"\n",(0,t.jsx)(n.li,{children:"recombination"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Push towards ",(0,t.jsx)(n.strong,{children:"novelty"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Decreasing"})," population diversity by selection"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"of parents"}),"\n",(0,t.jsx)(n.li,{children:"of survivors"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Push towards ",(0,t.jsx)(n.strong,{children:"quality"})]}),"\n",(0,t.jsx)(n.h2,{id:"representation",children:"Representation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Phenotype"}),": object in original problem context."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Genotype"}),': code to denote that object (chromosome, "digital DNA")']}),"\n",(0,t.jsx)(n.p,{children:"Two mappings:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Encoding: phenotype => genotype (not necessary one to one)"}),"\n",(0,t.jsx)(n.li,{children:"Decoding: genotype => phenotype (must be one to one)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Most common representation of genomes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Binary"}),"\n",(0,t.jsx)(n.li,{children:"Integer"}),"\n",(0,t.jsx)(n.li,{children:"Real-Valued or Floating-Point"}),"\n",(0,t.jsx)(n.li,{children:"Tree"}),"\n",(0,t.jsx)(n.li,{children:"Permutation"}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{title:"Example",type:"note",children:[(0,t.jsx)(n.p,{children:"Represent integer values by their binary code."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"encoding and decoding example",src:i(64354).Z+"",width:"810",height:"312"})})]}),"\n",(0,t.jsx)(n.h2,{id:"fitness-function",children:"Fitness Function"}),"\n",(0,t.jsxs)(n.p,{children:["A.k.a ",(0,t.jsx)(n.em,{children:"evaluation"})," function, ",(0,t.jsx)(n.em,{children:"quality"})," function or ",(0,t.jsx)(n.em,{children:"objective"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["Represents the task to solve, the ",(0,t.jsx)(n.strong,{children:"requirements"})," to adapt to. (the environment)"]}),"\n",(0,t.jsx)(n.p,{children:"Enables selection (provides basis for comparison)"}),"\n",(0,t.jsxs)(n.p,{children:["Assigns a single ",(0,t.jsx)(n.strong,{children:"real-valued fitness"})," to each ",(0,t.jsx)(n.em,{children:"phenotype"}),". The more discrimination (different values) the better because the fitness value is used as basis for ",(0,t.jsx)(n.em,{children:"selection"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"population",children:"Population"}),"\n",(0,t.jsxs)(n.p,{children:["Holds the candidate solutions of the problem as individuals (",(0,t.jsx)(n.a,{href:"#representation",children:"genotypes"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"A population is a multi-set of individuals, i.e. repetitions are possible."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Population is the ",(0,t.jsx)(n.strong,{children:"basic unit"})," of evolution, i.e. the population is evolving, not the individuals."]}),"\n",(0,t.jsx)(n.li,{children:"Selection operators act on population level."}),"\n",(0,t.jsx)(n.li,{children:"Variation operators act on individual level."}),"\n"]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Diversity"})," of a population refers to the number of different fitnesses / phenotypes / genotypes present."]})}),"\n",(0,t.jsx)(n.h2,{id:"selection-mechanism",children:"Selection Mechanism"}),"\n",(0,t.jsx)(n.p,{children:"Identifies individuals:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"to become parents"}),"\n",(0,t.jsx)(n.li,{children:"to survive"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Selection operators act on the population level."}),"\n",(0,t.jsxs)(n.p,{children:["One of the ",(0,t.jsx)(n.a,{href:"#two-pillars-of-evolution",children:"two pillars"}),", which pushes population towards higher ",(0,t.jsx)(n.em,{children:"fitness"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"High quality solutions more likely to be selected than low quality but not guaranteed, event worst in the current population can have non-zero probability of being selected."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Selector operators only use fitness and so are independent of ",(0,t.jsx)(n.strong,{children:"representation"}),". But variation operators need to match the representation."]})}),"\n",(0,t.jsx)(n.h2,{id:"variation-operators",children:"Variation Operators"}),"\n",(0,t.jsx)(n.p,{children:"Variation operators act on the individual level."}),"\n",(0,t.jsx)(n.p,{children:"Variation operators are used to generate new candidate solutions."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mutation",children:"Mutation operators"})}),"\n",(0,t.jsx)(n.li,{children:"Recombination operators"}),"\n",(0,t.jsx)(n.li,{children:"Crossover"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Most EAs use both. Variation operators must match the given representation."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Type of a variation operators depends on chosen representation."})}),"\n",(0,t.jsx)(n.h3,{id:"mutation",children:"Mutation"}),"\n",(0,t.jsx)(n.p,{children:"Mutation acts on one genotype and output another. It causes small, random variance."}),"\n",(0,t.jsxs)(n.admonition,{title:"Binary Representation",type:"note",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Mutation on binary representation",src:i(86358).Z+"",width:"553",height:"143"})}),(0,t.jsx)(n.p,{children:"Mutation can cause variable effect (gray color)."})]}),"\n",(0,t.jsx)(n.h3,{id:"crossover",children:"Crossover"}),"\n",(0,t.jsxs)(n.admonition,{title:"1-Point Crossover",type:"note",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Choose a random point on the two parents"}),"\n",(0,t.jsx)(n.li,{children:"Split parents at this crossover point"}),"\n",(0,t.jsx)(n.li,{children:"Create children by exchanging genes"}),"\n"]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"1 point crossover example",src:i(82551).Z+"",width:"510",height:"256"})}),(0,t.jsx)(n.p,{children:"Drawbacks:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"More likely to keep together genes that are near each other"}),"\n",(0,t.jsx)(n.li,{children:"Can never keep together genes from opposite ends of string"}),"\n",(0,t.jsxs)(n.li,{children:["This is known as ",(0,t.jsx)(n.strong,{children:"Positional Bias"})]}),"\n"]})]}),"\n",(0,t.jsxs)(n.admonition,{title:"N-Point Crossover",type:"note",children:[(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Choose n random crossover points"}),"\n",(0,t.jsx)(n.li,{children:"Split along those points"}),"\n",(0,t.jsx)(n.li,{children:"Clue parts, alternating between parents"}),"\n"]}),(0,t.jsx)(n.p,{children:"still some positional bias"})]}),"\n",(0,t.jsx)(n.h3,{id:"crossover-or-mutation",children:"Crossover OR Mutation"}),"\n",(0,t.jsx)(n.p,{children:"In general, it is good to have both."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Mutation-Only-EA is possible."}),"\n",(0,t.jsx)(n.li,{children:"Crossover-Only-EA would not work."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Crossover"})," is ",(0,t.jsx)(n.em,{children:"explorative"}),', it makes a big jump to an area somewhere "in between" two (parent) areas.']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Mutation"})," is exploitative, it creates random ",(0,t.jsx)(n.em,{children:"small"})," diversions, thereby staying near the parent."]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["Only ",(0,t.jsx)(n.strong,{children:"crossover"})," can combine information from two parents."]}),(0,t.jsxs)(n.p,{children:["Only ",(0,t.jsx)(n.strong,{children:"mutation"})," can introduce ",(0,t.jsx)(n.strong,{children:"new"})," information."]})]}),"\n",(0,t.jsx)(n.h3,{id:"recombination",children:"Recombination"}),"\n",(0,t.jsx)(n.p,{children:"Recombination merges information from parents into offspring."}),"\n",(0,t.jsx)(n.p,{children:"Choice of what information to merge is stochastic."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"Most offspring may be worse, or the same as the parents."}),(0,t.jsx)(n.p,{children:"Hope is that some are better by combining elements of genotypes that lead to good traits."})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Recombination example",src:i(79621).Z+"",width:"802",height:"431"})}),"\n",(0,t.jsx)(n.h2,{id:"initialization--termination",children:"Initialization / Termination"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Initialization"})," usually done at random."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Need to ensure even spread and mixture of possible values."}),"\n",(0,t.jsx)(n.li,{children:'Use problem-specific heuristics, to "seed" the population'}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Termination"})," condition checked every generation."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reaching pre-defined fitness"}),"\n",(0,t.jsx)(n.li,{children:"Reaching maximum allowed number of generations"}),"\n",(0,t.jsxs)(n.li,{children:["Reaching minimum level of diversity. (too many similar ",(0,t.jsx)(n.em,{children:"elite"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Reach some specified number of generations without fitness improvement. (tolerance)"}),"\n"]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}},82551:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/1-point-crossover-2d6c4cae4e477e3ae18c1b49642b41ae.png"},64354:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/encoding_decoding_example-b95230c2d50a688477b8881508f121e2.png"},86358:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/mutation_on_binary_genotype-b3d62e68dbfddfd405d2fdce66d247fe.png"},79621:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/recombination_example-a811e3fadfff6f436053b05972b039b7.png"},47336:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/scheme_of_EAs-65f93f7fcc6f41d13601af83fcf2e120.png"},11151:(e,n,i)=>{i.d(n,{Zo:()=>l,ah:()=>s});var t=i(67294);const o=t.createContext({});function s(e){const n=t.useContext(o);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function l({components:e,children:n,disableParentContext:i}){let l;return l=i?"function"==typeof e?e({}):e||r:s(e),t.createElement(o.Provider,{value:l},n)}}}]);